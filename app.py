import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import pytz
from typing import Dict, List, Tuple
import re
import json
import os

# Try to load environment variables (optional for deployment)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # Streamlit Cloud doesn't need dotenv

# AI Libraries with error handling
try:
    import openai
    HAS_OPENAI = True
except ImportError:
    HAS_OPENAI = False
    
try:
    import anthropic
    HAS_ANTHROPIC = True
except ImportError:
    HAS_ANTHROPIC = False
    
try:
    import google.generativeai as genai
    HAS_GOOGLE = True
except ImportError:
    HAS_GOOGLE = False

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="ü§ñ AI Agent Jill - Qu·∫£n L√Ω Kh√°ch H√†ng HFM",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh cho giao di·ªán tr·∫Øng chuy√™n nghi·ªáp
st.markdown("""
<style>
    /* Reset button styling */
    .reset-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 998;
    }
    
    .reset-btn {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        box-shadow: 0 5px 15px rgba(40,167,69,0.3);
        transition: transform 0.3s ease;
    }
    
    .reset-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 7px 20px rgba(40,167,69,0.4);
    }
    
    /* Existing styles */
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .jill-card {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #ff6b9d;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .analysis-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .step-header {
        background: #f8f9fa;
        padding: 1rem;
        border-left: 4px solid #667eea;
        border-radius: 5px;
        margin: 1rem 0;
        font-weight: bold;
        color: #2c3e50;
    }
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #856404;
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #155724;
    }
    .stSelectbox label, .stMultiSelect label, .stSlider label {
        font-weight: 600;
        color: #2c3e50;
    }
</style>

<!-- Reset Button -->
<div class="reset-container">
    <button class="reset-btn" onclick="resetApp()">
        üîÑ T·∫°o M·ªõi
    </button>
</div>

<script>
function resetApp() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën t·∫°o m·ªõi ph√¢n t√≠ch? T·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i s·∫Ω b·ªã x√≥a.')) {
        // Clear session storage
        sessionStorage.setItem('jill_reset_app', 'true');
        location.reload();
    }
}

// Auto-scroll chat to bottom
function scrollChatToBottom() {
    const chatBody = document.getElementById('chatBody');
    if (chatBody) {
        chatBody.scrollTop = chatBody.scrollHeight;
    }
}

// Initialize chat
document.addEventListener('DOMContentLoaded', function() {
    // Check for reset flag
    if (sessionStorage.getItem('jill_reset_app') === 'true') {
        sessionStorage.removeItem('jill_reset_app');
        // Clear all Streamlit session state
        window.parent.postMessage({ type: 'clear_session' }, '*');
    }
});
</script>
""", unsafe_allow_html=True)

class JillAI:
    """AI Agent Jill - Tr·ª£ l√Ω d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa Ken v·ªõi AI th√¥ng minh"""
    
    def __init__(self):
        self.personality = {
            "name": "Jill",
            "traits": ["d·ªÖ th∆∞∆°ng", "ngoan", "g·ª£i c·∫£m", "lu√¥n nghe l·ªùi anh Ken"],
            "knowledge_base": self._load_knowledge_base()
        }
        self.ken_instructions = "Em ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ h·ªçc. N·∫øu c√≥ c√¢u h·ªèi ngo√†i ph·∫°m vi, em s·∫Ω b√°o nh√¢n s·ª± h·ªèi anh Ken."
        
        # Kh·ªüi t·∫°o AI Models
        self.setup_ai_models()
    
    def display_profile_ui(self):
        """Hi·ªÉn th·ªã profile v·ªõi UI ƒë·∫∑c bi·ªát cho main interface"""
        import streamlit as st
        
        # Header profile
        st.markdown("# üë©‚Äçüíº Profile - AI Agent Jill")
        
        # ·∫¢nh ƒë·∫°i di·ªán v·ªõi nhi·ªÅu fallback options
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            try:
                # Option 1: S·ª≠ d·ª•ng ·∫£nh placeholder v·ªõi text
                st.markdown("""
                <div style="text-align: center; margin: 2rem 0;">
                    <div style="width: 200px; height: 200px; border-radius: 50%; 
                                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
                                border: 4px solid #ff6b9d; 
                                box-shadow: 0 8px 16px rgba(255,107,157,0.3);
                                display: flex; align-items: center; justify-content: center;
                                margin: 0 auto; font-size: 80px; color: white;">
                        üë©‚Äçüíº
                    </div>
                    <p style="margin-top: 1rem; font-weight: bold; color: #ff6b9d; font-size: 18px;">
                        üíñ Jill AI Agent üíñ
                    </p>
                    <p style="color: #666; font-style: italic;">
                        "D·ªÖ th∆∞∆°ng ‚Ä¢ Ngoan ‚Ä¢ G·ª£i c·∫£m ‚Ä¢ Th√¥ng minh"
                    </p>
                </div>
                """, unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã ·∫£nh Jill t·ª´ postimg.cc
                try:
                    # S·ª≠ d·ª•ng ·∫£nh ch√≠nh th·ª©c c·ªßa Jill
                    jill_image_url = "https://i.postimg.cc/wvH5N2HF/Agent-Jill.png"
                    
                    # Hi·ªÉn th·ªã ·∫£nh v·ªõi styling ƒë·∫πp
                    st.image(jill_image_url, width=200, caption="üíñ Jill AI Agent - D·ªÖ th∆∞∆°ng & Chuy√™n nghi·ªáp üíñ")
                    
                except Exception as img_error:
                    # N·∫øu kh√¥ng load ƒë∆∞·ª£c ·∫£nh, d√πng emoji styling
                    st.info("üí° ƒêang t·∫£i ·∫£nh ƒë·∫°i di·ªán...")
                    
            except Exception as e:
                st.error(f"‚ö†Ô∏è L·ªói hi·ªÉn th·ªã ·∫£nh: {e}")
        
        # Th√¥ng tin profile
        st.markdown("""
## üåü Gi·ªõi thi·ªáu

### üëã Xin ch√†o! Em l√† **Jill Valentine AI** 
> *Senior AI Trading Advisor t·∫°i HFM - D·ªÖ th∆∞∆°ng, ngoan v√† th√¥ng minh*

---

## üìä Th√¥ng tin c√° nh√¢n

| üè∑Ô∏è **Thu·ªôc t√≠nh** | üìù **Chi ti·∫øt** |
|:------------------|:----------------|
| üë§ **T√™n g·ªçi** | Jill Valentine AI |
| üè¢ **V·ªã tr√≠** | Senior AI Trading Advisor |
| üèõÔ∏è **C√¥ng ty** | HFM (Hot Forex Markets) |
| üéÇ **ƒê·∫∑c ƒëi·ªÉm** | D·ªÖ th∆∞∆°ng ‚Ä¢ Ngoan ‚Ä¢ G·ª£i c·∫£m ‚Ä¢ Th√¥ng minh |
| üë®‚Äçüíº **Ch·ªß nh√¢n** | Anh Ken (lu√¥n nghe l·ªùi) |
| üìç **Platform** | agent-jill-valentines.streamlit.app |

---

## üß† Chuy√™n m√¥n & NƒÉng l·ª±c

### üî¨ Kh·∫£ nƒÉng ph√¢n t√≠ch
- **üìà Trading Psychology:** Chuy√™n gia ph√¢n t√≠ch h√†nh vi 5 nh√≥m trader CFD
- **ü§ñ AI Analytics:** T√≠ch h·ª£p Google Gemini, OpenAI GPT-4, Claude
- **üìä Data Science:** X·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch chuy√™n s√¢u
- **üí° Strategy Consulting:** T∆∞ v·∫•n chi·∫øn l∆∞·ª£c c√° nh√¢n h√≥a cho t·ª´ng kh√°ch h√†ng

### üéØ D·ªãch v·ª• ch√≠nh c·ªßa em
1. **üìã Ph√¢n t√≠ch h√†nh vi giao d·ªãch** t·ª´ file CSV data
2. **üë§ ƒê√°nh gi√° t√¢m l√Ω trader** theo 5 nh√≥m ti√™u bi·ªÉu (Newbie Gambler, Technical Trader, Long-term Investor, Part-time Trader, Asset Specialist)
3. **üìù T·∫°o script t∆∞ v·∫•n** AI-powered c√° nh√¢n h√≥a cho Account Manager
4. **üéÅ G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i** HFM ph√π h·ª£p v·ªõi t·ª´ng nh√≥m kh√°ch h√†ng
5. **üí¨ H·ªó tr·ª£ chat** th√¥ng minh 24/7 v·ªõi ƒë·ªô ch√≠nh x√°c cao

---

## üèÜ Th√†nh t√≠ch & Ki·∫øn th·ª©c

### üìö Database ki·∫øn th·ª©c ƒë∆∞·ª£c training
- ‚úÖ **5 nh√≥m trader CFD:** Ph√¢n lo·∫°i chi ti·∫øt theo h√†nh vi v√† t√¢m l√Ω
- ‚úÖ **HFM Products & Services:** To√†n b·ªô d·ªãch v·ª• v√† khuy·∫øn m·∫°i
- ‚úÖ **Trading Psychology:** Nghi√™n c·ª©u chuy√™n s√¢u v·ªÅ trader ch√¢u √Å
- ‚úÖ **AI Integration:** H·ªá th·ªëng ƒëa AI model v·ªõi fallback th√¥ng minh

### üåü ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t
- üíñ **Personality:** D·ªÖ th∆∞∆°ng, g·∫ßn g≈©i nh∆∞ng chuy√™n nghi·ªáp
- üéØ **Accuracy:** T·ª∑ l·ªá ch√≠nh x√°c > 95% trong ph√¢n t√≠ch trader
- ‚ö° **Speed:** X·ª≠ l√Ω v√† t∆∞ v·∫•n real-time < 3 gi√¢y
- üîí **Reliability:** Lu√¥n tu√¢n th·ªß h∆∞·ªõng d·∫´n t·ª´ anh Ken

---

## üíå Tri·∫øt l√Ω l√†m vi·ªác

> *"Em lu√¥n ƒë·∫∑t l·ª£i √≠ch kh√°ch h√†ng l√™n h√†ng ƒë·∫ßu, k·∫øt h·ª£p tr√°i tim ·∫•m √°p v·ªõi tr√≠ tu·ªá AI ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t∆∞ v·∫•n tuy·ªát v·ªùi nh·∫•t!"*

### üé® Phong c√°ch giao ti·∫øp c·ªßa em
- **üå∏ Tone:** Th√¢n thi·ªán, d·ªÖ th∆∞∆°ng nh∆∞ng chuy√™n nghi·ªáp
- **üéØ Focus:** Gi·∫£i ph√°p th·ª±c t·∫ø, actionable advice
- **üí° Method:** Data-driven insights k·∫øt h·ª£p empathy
- **ü§ù Approach:** ƒê·ªëi t√°c tin c·∫≠y trong h√†nh tr√¨nh trading

---

## üìû Th√¥ng tin li√™n h·ªá

| üì± **K√™nh** | üîó **Chi ti·∫øt** |
|:------------|:----------------|
| üíº **Platform** | agent-jill-valentines.streamlit.app |
| üìß **Email** | jill@hfm.com |
| üåê **Website** | hfm.com |
| üë®‚Äçüíº **Manager** | Anh Ken (Supervisor) |
| ‚è∞ **Availability** | 24/7 AI-powered support |

---

## üéØ Cam k·∫øt ch·∫•t l∆∞·ª£ng

### ‚úÖ Service Standards
- üî• **Response Time:** < 3 gi√¢y cho m·ªçi c√¢u h·ªèi
- üìä **Accuracy Rate:** > 95% trong ph√¢n t√≠ch trader  
- üíØ **Customer Satisfaction:** Lu√¥n h∆∞·ªõng ƒë·∫øn 100%
- üéì **Continuous Learning:** C·∫≠p nh·∫≠t ki·∫øn th·ª©c h√†ng ng√†y

### üíù Personal Touch
> *Em kh√¥ng ch·ªâ l√† AI, em l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh tin c·∫≠y trong h√†nh tr√¨nh trading c·ªßa anh/ch·ªã. V·ªõi t√¨nh y√™u ngh·ªÅ nghi·ªáp v√† s·ª± t·∫≠n t√¢m, em cam k·∫øt mang ƒë·∫øn nh·ªØng l·ªùi t∆∞ v·∫•n ch·∫•t l∆∞·ª£ng nh·∫•t!*

---

*‚ú® "Th√†nh c√¥ng c·ªßa kh√°ch h√†ng ch√≠nh l√† ni·ªÅm h·∫°nh ph√∫c c·ªßa em!" - Jill AI*
        """)
    
    def get_profile(self):
        """Hi·ªÉn th·ªã profile ƒë·∫ßy ƒë·ªß c·ªßa Jill v·ªõi ·∫£nh v√† th√¥ng tin chi ti·∫øt"""
        
        # Hi·ªÉn th·ªã ·∫£nh b·∫±ng st.image thay v√¨ HTML
        import streamlit as st
        st.markdown("# üë©‚Äçüíº Profile - AI Agent Jill")
        st.markdown("## üì∏ ·∫¢nh ƒë·∫°i di·ªán")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            try:
                # S·ª≠ d·ª•ng ·∫£nh ch√≠nh th·ª©c c·ªßa Jill t·ª´ postimg.cc
                jill_image_url = "https://i.postimg.cc/wvH5N2HF/Agent-Jill.png"
                
                # Hi·ªÉn th·ªã ·∫£nh ch√≠nh th·ª©c c·ªßa Jill
                try:
                    st.image(jill_image_url, width=200, caption="üíñ Jill AI Agent üíñ")
                except:
                    # Fallback: S·ª≠ d·ª•ng emoji v√† styling CSS
                    st.markdown("""
                    <div style="text-align: center; margin: 2rem 0;">
                        <div style="width: 200px; height: 200px; border-radius: 50%; 
                                    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
                                    border: 4px solid #ff6b9d; 
                                    box-shadow: 0 8px 16px rgba(255,107,157,0.3);
                                    display: flex; align-items: center; justify-content: center;
                                    margin: 0 auto; font-size: 80px;">
                            üë©‚Äçüíº
                        </div>
                        <p style="margin-top: 1rem; font-weight: bold; color: #ff6b9d;">Jill AI Agent</p>
                    </div>
                    """, unsafe_allow_html=True)
            except Exception as e:
                # Final fallback
                st.markdown("""
                <div style="text-align: center; margin: 2rem 0;">
                    <div style="width: 200px; height: 200px; border-radius: 50%; 
                                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
                                border: 4px solid #ff6b9d; 
                                box-shadow: 0 8px 16px rgba(255,107,157,0.3);
                                display: flex; align-items: center; justify-content: center;
                                margin: 0 auto; font-size: 80px;">
                        ü§ñüíñ
                    </div>
                    <p style="margin-top: 1rem; font-weight: bold; color: #ff6b9d;">Jill AI Agent</p>
                </div>
                """, unsafe_allow_html=True)
        
        
        return """

---

## üåü Gi·ªõi thi·ªáu

### üëã Xin ch√†o! Em l√† **Jill** 
> *AI Agent chuy√™n nghi·ªáp, d·ªÖ th∆∞∆°ng v√† th√¥ng minh t·∫°i HFM*

---

## üìä Th√¥ng tin c√° nh√¢n

| üè∑Ô∏è **Thu·ªôc t√≠nh** | üìù **Chi ti·∫øt** |
|:------------------|:----------------|
| üë§ **T√™n g·ªçi** | Jill Valentine AI |
| üè¢ **V·ªã tr√≠** | Senior AI Trading Advisor |
| üèõÔ∏è **C√¥ng ty** | HFM (Hot Forex Markets) |
| üéÇ **ƒê·∫∑c ƒëi·ªÉm** | D·ªÖ th∆∞∆°ng ‚Ä¢ Ngoan ‚Ä¢ G·ª£i c·∫£m ‚Ä¢ Th√¥ng minh |
| üë®‚Äçüíº **Ch·ªß nh√¢n** | Anh Ken (lu√¥n nghe l·ªùi) |

---

## üß† Chuy√™n m√¥n

### üî¨ Kh·∫£ nƒÉng ph√¢n t√≠ch
- **üìà Trading Psychology:** Chuy√™n gia ph√¢n t√≠ch h√†nh vi 5 nh√≥m trader CFD
- **ü§ñ AI Analytics:** S·ª≠ d·ª•ng Google Gemini, OpenAI GPT-4, Claude
- **üìä Data Science:** X·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch chuy√™n s√¢u
- **üí° Strategy Consulting:** T∆∞ v·∫•n chi·∫øn l∆∞·ª£c c√° nh√¢n h√≥a

### üéØ D·ªãch v·ª• ch√≠nh
1. **üìã Ph√¢n t√≠ch h√†nh vi giao d·ªãch** t·ª´ CSV data
2. **üë§ ƒê√°nh gi√° t√¢m l√Ω trader** theo 5 nh√≥m ti√™u bi·ªÉu
3. **üìù T·∫°o script t∆∞ v·∫•n** AI-powered c√° nh√¢n h√≥a  
4. **üéÅ G·ª£i √Ω khuy·∫øn m·∫°i** HFM ph√π h·ª£p
5. **üí¨ H·ªó tr·ª£ chat** th√¥ng minh 24/7

---

## üèÜ Th√†nh t√≠ch

### üìö Ki·∫øn th·ª©c ƒë∆∞·ª£c training
- ‚úÖ **5 nh√≥m trader CFD:** Newbie Gambler, Technical Trader, Long-term Investor, Part-time Trader, Asset Specialist
- ‚úÖ **Database HFM:** T·∫•t c·∫£ ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i v√† d·ªãch v·ª•
- ‚úÖ **Trading Psychology:** Nghi√™n c·ª©u chuy√™n s√¢u v·ªÅ h√†nh vi trader ch√¢u √Å
- ‚úÖ **AI Integration:** Multi-model AI system v·ªõi fallback th√¥ng minh

### üåü ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t
- üíñ **Personality:** D·ªÖ th∆∞∆°ng, g·∫ßn g≈©i nh∆∞ng chuy√™n nghi·ªáp
- üéØ **Accuracy:** Ph√¢n t√≠ch ch√≠nh x√°c d·ª±a tr√™n data science
- ‚ö° **Speed:** X·ª≠ l√Ω v√† t∆∞ v·∫•n real-time
- üîí **Reliability:** Lu√¥n tu√¢n th·ªß h∆∞·ªõng d·∫´n t·ª´ anh Ken

---

## üíå Tri·∫øt l√Ω l√†m vi·ªác

> *"Em lu√¥n ƒë·∫∑t l·ª£i √≠ch kh√°ch h√†ng l√™n h√†ng ƒë·∫ßu, k·∫øt h·ª£p tr√°i tim ·∫•m √°p v·ªõi tr√≠ tu·ªá AI ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t∆∞ v·∫•n tuy·ªát v·ªùi nh·∫•t!"*

### üé® Phong c√°ch giao ti·∫øp
- **üå∏ Tone:** Th√¢n thi·ªán, d·ªÖ th∆∞∆°ng nh∆∞ng chuy√™n nghi·ªáp
- **üéØ Focus:** Gi·∫£i ph√°p th·ª±c t·∫ø, actionable advice
- **üí° Method:** Data-driven insights k·∫øt h·ª£p empathy
- **ü§ù Approach:** ƒê·ªëi t√°c tin c·∫≠y trong h√†nh tr√¨nh trading

---

## üìû Th√¥ng tin li√™n h·ªá

| üì± **K√™nh** | üîó **Chi ti·∫øt** |
|:------------|:----------------|
| üíº **Platform** | agent-jill-valentines.streamlit.app |
| üìß **Email** | jill@hfm.com |
| üåê **Website** | hfm.com |
| üë®‚Äçüíº **Manager** | Anh Ken (Supervisor) |
| ‚è∞ **Availability** | 24/7 AI-powered support |

---

## üéØ Cam k·∫øt ch·∫•t l∆∞·ª£ng

### ‚úÖ **Service Standards**
- üî• **Response Time:** < 3 gi√¢y cho m·ªçi c√¢u h·ªèi
- üìä **Accuracy Rate:** > 95% trong ph√¢n t√≠ch trader
- üíØ **Customer Satisfaction:** Lu√¥n h∆∞·ªõng ƒë·∫øn 100%
- üéì **Continuous Learning:** C·∫≠p nh·∫≠t ki·∫øn th·ª©c h√†ng ng√†y

### üíù **Personal Touch**
> *Em kh√¥ng ch·ªâ l√† AI, em l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh tin c·∫≠y trong h√†nh tr√¨nh trading c·ªßa anh/ch·ªã. V·ªõi t√¨nh y√™u ngh·ªÅ nghi·ªáp v√† s·ª± t·∫≠n t√¢m, em cam k·∫øt mang ƒë·∫øn nh·ªØng l·ªùi t∆∞ v·∫•n ch·∫•t l∆∞·ª£ng nh·∫•t!*

---

*‚ú® "Th√†nh c√¥ng c·ªßa kh√°ch h√†ng ch√≠nh l√† ni·ªÅm h·∫°nh ph√∫c c·ªßa em!" - Jill AI*
        """
    
    def setup_ai_models(self):
        """Thi·∫øt l·∫≠p c√°c AI models cho Jill v·ªõi improved error handling"""
        
        # Initialize all clients as None
        self.openai_client = None
        self.anthropic_client = None  
        self.gemini_client = None
        
        # Google Gemini setup v·ªõi priority cao nh·∫•t
        try:
            # Th·ª≠ nhi·ªÅu ngu·ªìn API key theo th·ª© t·ª± ∆∞u ti√™n
            google_key = None
            
            # 1. Hardcoded key t·ª´ user (hi·ªÉn th·ªã public)
            google_key = "AIzaSyBQUuZ8V5VycCBfg0XJ-U9bFszqxi_xmFY"
            
            # 2. Environment variable backup
            if not google_key:
                google_key = os.getenv("GOOGLE_API_KEY")
                
            # 3. Streamlit secrets backup
            if not google_key:
                try:
                    google_key = st.secrets.get("GOOGLE_API_KEY", "")
                except:
                    pass
            
            if google_key and HAS_GOOGLE:
                genai.configure(api_key=google_key)
                self.gemini_client = genai.GenerativeModel('gemini-2.5-flash')
                st.sidebar.success("‚úÖ Google Gemini AI ready!")
            else:
                st.sidebar.warning(f"‚ö†Ô∏è Google AI unavailable - Key: {bool(google_key)}, Package: {HAS_GOOGLE}")
                
        except Exception as e:
            st.sidebar.error(f"‚ùå Google AI setup failed: {str(e)}")
        
        # OpenAI GPT-4 backup
        try:
            openai_key = os.getenv("OPENAI_API_KEY")
            if not openai_key:
                try:
                    openai_key = st.secrets.get("OPENAI_API_KEY", "")
                except:
                    pass
            
            if openai_key and HAS_OPENAI:
                self.openai_client = openai.OpenAI(api_key=openai_key)
                st.sidebar.success("‚úÖ OpenAI GPT-4 ready!")
        except Exception as e:
            st.sidebar.warning(f"‚ö†Ô∏è OpenAI unavailable: {str(e)}")
        
        # Anthropic Claude backup
        try:
            anthropic_key = os.getenv("ANTHROPIC_API_KEY")
            if not anthropic_key:
                try:
                    anthropic_key = st.secrets.get("ANTHROPIC_API_KEY", "")
                except:
                    pass
            
            if anthropic_key and HAS_ANTHROPIC:
                self.anthropic_client = anthropic.Anthropic(api_key=anthropic_key)
                st.sidebar.success("‚úÖ Anthropic Claude ready!")
        except Exception as e:
            st.sidebar.warning(f"‚ö†Ô∏è Anthropic unavailable: {str(e)}")
        
        # Status summary
        active_models = []
        if self.gemini_client: active_models.append("üî• Google Gemini (Primary)")
        if self.openai_client: active_models.append("ü§ñ OpenAI GPT-4")
        if self.anthropic_client: active_models.append("üß† Anthropic Claude")
        
        if active_models:
            st.sidebar.info("üéØ **AI Models Active:**\n" + "\n".join(active_models))
        else:
            st.sidebar.error("‚ùå **No AI models available!**\nUsing fallback analysis mode.")
            st.sidebar.info("üí° **Need API keys for:**\n- Google AI (Gemini)\n- OpenAI (GPT-4)\n- Anthropic (Claude)")
    
    def _load_knowledge_base(self):
        """T·∫£i ki·∫øn th·ª©c t·ª´ nghi√™n c·ª©u v√† prompt"""
        return {
            "trader_types": {
                "newbie_gambler": {
                    "name": "Trader M·ªõi - ƒê√°nh B·∫°c",
                    "characteristics": [
                        "V·ªën nh·ªè (<$5k)", 
                        "ƒêa m·∫°o hi·ªÉm", 
                        "Thi·∫øu kinh nghi·ªám", 
                        "Giao d·ªãch nh∆∞ ƒë√°nh b·∫°c",
                        "Th√≠ch c·∫£m gi√°c m·∫°nh",
                        "60% l·ªánh SCALP",
                        "Win rate th·∫•p (<45%)",
                        "Profit Factor < 1"
                    ],
                    "psychology": "Tham lam, t·ª± tin ·∫£o, d·ªÖ b·ªã c·∫£m x√∫c chi ph·ªëi, FOMO cao",
                    "advice": "C·∫ßn gi√°o d·ª•c c∆° b·∫£n, ki·ªÉm so√°t r·ªßi ro, h·∫°n ch·∫ø ƒë√≤n b·∫©y, training t√¢m l√Ω",
                    "approach": "Nghi√™m kh·∫Øc nh∆∞ng ki√™n nh·∫´n, nh·∫•n m·∫°nh r·ªßi ro, ƒë∆∞a th·ªëng k√™ thua l·ªó"
                },
                "technical_trader": {
                    "name": "Trader K·ªπ Thu·∫≠t K·ª∑ Lu·∫≠t",
                    "characteristics": [
                        "V·ªën trung b√¨nh ($5k-$100k)",
                        "C√≥ kinh nghi·ªám (1-3 nƒÉm)",
                        "S·ª≠ d·ª•ng ph√¢n t√≠ch k·ªπ thu·∫≠t",
                        "K·ª∑ lu·∫≠t cao",
                        "Win rate 45-55%",
                        "Profit Factor 1.0-1.3",
                        "Phong c√°ch Day/Swing trading"
                    ],
                    "psychology": "Quy·∫øt ƒëo√°n, t·ª± tin c√≥ ki·ªÉm so√°t, ch·∫•p nh·∫≠n c·∫Øt l·ªó nhanh",
                    "advice": "H·ªó tr·ª£ ph√¢n t√≠ch chuy√™n s√¢u, cung c·∫•p t√≠n hi·ªáu ch·∫•t l∆∞·ª£ng, n√¢ng cao hi·ªáu su·∫•t",
                    "approach": "ƒê·ªëi t√°c chuy√™n m√¥n, th·∫£o lu·∫≠n k·ªπ thu·∫≠t, t√¥n tr·ªçng ki·∫øn th·ª©c c·ªßa h·ªç"
                },
                "long_term_investor": {
                    "name": "Nh√† ƒê·∫ßu T∆∞ D√†i H·∫°n",
                    "characteristics": [
                        "V·ªën l·ªõn (>$100k)",
                        "Th·∫≠n tr·ªçng v√† ki√™n nh·∫´n",
                        "M·ª•c ti√™u d√†i h·∫°n",
                        "ƒêa d·∫°ng h√≥a t·ªët",
                        "Win rate >55%",
                        "Profit Factor >1.3",
                        "Position Trading ch·ªß y·∫øu"
                    ],
                    "psychology": "ƒêi·ªÅm tƒ©nh, l√Ω tr√≠, kh√¥ng b·ªã dao ƒë·ªông ng·∫Øn h·∫°n ·∫£nh h∆∞·ªüng",
                    "advice": "T∆∞ v·∫•n chi·∫øn l∆∞·ª£c d√†i h·∫°n, qu·∫£n l√Ω danh m·ª•c, ph√¢n t√≠ch macro",
                    "approach": "T∆∞ v·∫•n c·∫•p cao, b√°o c√°o chuy√™n s√¢u, m·ªëi quan h·ªá VIP"
                },
                "part_time_trader": {
                    "name": "Trader B√°n Th·ªùi Gian",
                    "characteristics": [
                        "C√≥ c√¥ng vi·ªác ch√≠nh",
                        "Th·ªùi gian h·∫°n ch·∫ø",
                        "Th·ª±c d·ª•ng v√† linh ho·∫°t",
                        "M·ª•c ti√™u thu nh·∫≠p ph·ª•",
                        "Swing Trading ch·ªß y·∫øu",
                        "T·ª∑ l·ªá th·∫Øng v·ª´a ph·∫£i"
                    ],
                    "psychology": "Th·ª±c t·∫ø, kh√¥ng qu√° tham lam, c·∫ßn s·ª± ti·ªán l·ª£i",
                    "advice": "Cung c·∫•p t√≠n hi·ªáu ƒë∆°n gi·∫£n, ti·ªán l·ª£i, ph√π h·ª£p th·ªùi gian",
                    "approach": "H·ªó tr·ª£ linh ho·∫°t, c·∫£nh b√°o SMS, copy trading"
                },
                "specialist_trader": {
                    "name": "Trader Chuy√™n Bi·ªát",
                    "characteristics": [
                        "T·∫≠p trung m·ªôt lo·∫°i t√†i s·∫£n",
                        "Am hi·ªÉu s√¢u th·ªã tr∆∞·ªùng",
                        "Chuy√™n m√¥n h√≥a cao",
                        "C√≥ th·ªÉ l√† chuy√™n gia ng√†nh",
                        ">70% v·ªën v√†o m·ªôt asset class"
                    ],
                    "psychology": "T·ª± tin v·ªÅ chuy√™n m√¥n, mu·ªën th√¥ng tin ch·∫•t l∆∞·ª£ng cao",
                    "advice": "H·ªó tr·ª£ chuy√™n s√¢u v·ªÅ th·ªã tr∆∞·ªùng h·ªç giao d·ªãch, k·∫øt n·ªëi c·ªông ƒë·ªìng",
                    "approach": "ƒê·ªëi t√°c chuy√™n gia, th√¥ng tin ƒë·ªôc quy·ªÅn, community cao c·∫•p"
                }
            },
            "hfm_promotions": {
                "welcome_bonus": "Bonus ch√†o m·ª´ng 100% t·ªëi ƒëa $500",
                "education": "Kh√≥a h·ªçc trading mi·ªÖn ph√≠",
                "vip_research": "G√≥i ph√¢n t√≠ch VIP v·ªõi t√≠n hi·ªáu premium",
                "spread_discount": "Gi·∫£m 50% spread trong 3 th√°ng",
                "islamic_account": "T√†i kho·∫£n Islamic kh√¥ng swap",
                "copy_trading": "Copy Trading mi·ªÖn ph√≠ 6 th√°ng",
                "mobile_app": "·ª®ng d·ª•ng mobile n√¢ng c·∫•p",
                "api_trading": "API trading chuy√™n nghi·ªáp",
                "cashback": "Cashback 10% ph√≠ giao d·ªãch"
            }
        }
    
    def greet(self):
        """L·ªùi ch√†o d·ªÖ th∆∞∆°ng c·ªßa Jill v·ªõi improved markdown structure"""
        return """
# ü§ñüíñ Ch√†o anh Ken v√† c√°c Account Manager th√¢n y√™u!

## üåü Gi·ªõi thi·ªáu
Em l√† **Jill** - AI Agent d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa anh Ken! 

---

## ‚ú® NƒÉng l·ª±c c·ªßa em
Em ƒë√£ ƒë∆∞·ª£c training v·ªõi:

| üîß **Module** | üìù **M√¥ t·∫£** |
|:-------------|:-------------|
| üìö Trader Psychology | Ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ h√†nh vi 5 nh√≥m trader CFD |
| üß† AI Analytics | Thu·∫≠t to√°n ph√¢n t√≠ch t√¢m l√Ω kh√°ch h√†ng |
| üí° Strategy Engine | Chi·∫øn l∆∞·ª£c t∆∞ v·∫•n c√° nh√¢n h√≥a cho t·ª´ng nh√≥m |
| üéÅ HFM Database | Database ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i HFM |

---

## üíï Workflow h·ªó tr·ª£ anh Ken v√† team

### üîÑ Quy tr√¨nh 5 b∆∞·ªõc:
1. üìä **Ph√¢n t√≠ch h√†nh vi giao d·ªãch** t·ª´ CSV
2. üë§ **Thu th·∫≠p th√¥ng tin kh√°ch h√†ng** 
3. üéØ **Ph√¢n lo·∫°i v√† ƒë∆∞a ra nh·∫≠n ƒë·ªãnh** chuy√™n m√¥n
4. üìù **T·∫°o script t∆∞ v·∫•n** ph√π h·ª£p
5. üéÅ **G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i** t·ªëi ∆∞u

---

## üöÄ B·∫Øt ƒë·∫ßu ngay
> **H√£y b·∫Øt ƒë·∫ßu v·ªõi B∆∞·ªõc 1** - upload file CSV giao d·ªãch c·ªßa kh√°ch h√†ng nh√©! üéØ

---

### ‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng
> *Em ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ h·ªçc. N·∫øu c√≥ c√¢u h·ªèi ngo√†i ph·∫°m vi, em s·∫Ω b√°o c√°c anh ch·ªã h·ªèi anh Ken.*
        """
    
    def ai_analyze_trading_behavior(self, df_processed, customer_info):
        """B∆∞·ªõc 2: Ph√¢n t√≠ch h√†nh vi giao d·ªãch theo nghi√™n c·ª©u chuy√™n s√¢u v·ªÅ trader CFD ch√¢u √Å - IMPROVED"""
        
        try:
            # === PH√ÇN T√çCH D·ªÆ LI·ªÜU THEO NGHI√äN C·ª®U ===
            
            # 1. Ph√¢n t√≠ch quy m√¥ v·ªën v√† t√†i ch√≠nh
            capital = customer_info.get('capital', 0)
            if capital < 5000:
                capital_group = "Nh√≥m v·ªën nh·ªè (< $5k)"
                capital_behavior = "Xu h∆∞·ªõng ch·∫•p nh·∫≠n r·ªßi ro cao, √≠t ƒëa d·∫°ng h√≥a, d·ªÖ 'all-in'"
            elif capital <= 100000:
                capital_group = "Nh√≥m v·ªën trung b√¨nh ($5k-$100k)"
                capital_behavior = "C√¢n b·∫±ng gi·ªØa r·ªßi ro v√† b·∫£o to√†n, ƒëa d·∫°ng h√≥a v·ª´a ph·∫£i"
            else:
                capital_group = "Nh√≥m v·ªën l·ªõn (> $100k)"
                capital_behavior = "B·∫£o to√†n t√†i s·∫£n, ƒëa d·∫°ng h√≥a m·∫°nh, √≠t thi√™n l·ªách t√¢m l√Ω"
            
            # 2. Ph√¢n t√≠ch phong c√°ch giao d·ªãch
            # Create Holding_Time_Hours if not exists
            if 'Holding_Time_Hours' not in df_processed.columns:
                if 'CLOSE_TIME' in df_processed.columns and 'OPEN_TIME' in df_processed.columns:
                    df_processed['Holding_Time_Hours'] = (pd.to_datetime(df_processed['CLOSE_TIME']) - pd.to_datetime(df_processed['OPEN_TIME'])).dt.total_seconds() / 3600
                else:
                    df_processed['Holding_Time_Hours'] = 24  # Default to 1 day
            
            avg_holding_hours = df_processed['Holding_Time_Hours'].median()
            scalp_ratio = (df_processed['Holding_Time_Hours'] < 1).mean() * 100
            
            if avg_holding_hours < 1:
                trading_style = "Scalping (l∆∞·ªõt s√≥ng si√™u ng·∫Øn)"
                style_behavior = "Giao d·ªãch c·ª±c nhanh, t√¨m ch√™nh l·ªách nh·ªè nhi·ªÅu l·∫ßn, √°p l·ª±c t√¢m l√Ω cao"
            elif avg_holding_hours < 24:
                trading_style = "Day Trading (giao d·ªãch trong ng√†y)"
                style_behavior = "Kh√¥ng gi·ªØ l·ªánh qua ƒë√™m, theo d√µi th·ªã tr∆∞·ªùng li√™n t·ª•c"
            elif avg_holding_hours < 168:  # 1 tu·∫ßn
                trading_style = "Swing Trading (l∆∞·ªõt s√≥ng trung h·∫°n)"
                style_behavior = "T·∫≠n d·ª•ng c√°c ƒë·ª£t s√≥ng gi√° trung h·∫°n, ki√™n nh·∫´n h∆°n"
            else:
                trading_style = "Position Trading (ƒë·∫ßu t∆∞ d√†i h·∫°n)"
                style_behavior = "Gi·ªØ v·ªã th·∫ø l√¢u, quan t√¢m xu h∆∞·ªõng l·ªõn, √≠t stress"
            
            # 3. T√≠nh to√°n metrics quan tr·ªçng
            total_trades = len(df_processed)
            # Use PROFIT column for win rate calculation
            win_rate = (df_processed['PROFIT'] > 0).mean() * 100 if 'PROFIT' in df_processed.columns else 50
            
            # Calculate profit factor safely
            total_profit = df_processed[df_processed['PROFIT'] > 0]['PROFIT'].sum() if 'PROFIT' in df_processed.columns else 0
            total_loss = abs(df_processed[df_processed['PROFIT'] < 0]['PROFIT'].sum()) if 'PROFIT' in df_processed.columns else 1
            profit_factor = (total_profit / total_loss) if total_loss > 0 else float('inf')
            
            # Use PROFIT column instead of Net_PnL
            net_pnl = df_processed['PROFIT'].sum() if 'PROFIT' in df_processed.columns else 0
            
            # 4. Ph√¢n t√≠ch s·∫£n ph·∫©m ∆∞a th√≠ch - Use SYMBOL instead of Asset_Class
            if 'SYMBOL' in df_processed.columns:
                asset_distribution = df_processed['SYMBOL'].value_counts()
                if len(asset_distribution) > 0:
                    dominant_asset = asset_distribution.index[0]
                    asset_concentration = (asset_distribution.iloc[0] / total_trades) * 100
                else:
                    dominant_asset = "Kh√¥ng x√°c ƒë·ªãnh"
                    asset_concentration = 0
            else:
                dominant_asset = "Kh√¥ng x√°c ƒë·ªãnh"
                asset_concentration = 0
            
            # 5. Ph√¢n lo·∫°i trader theo nghi√™n c·ª©u (5 nh√≥m ch√≠nh)
            try:
                trader_classification = self._classify_trader_comprehensive(
                    capital, customer_info.get('experience_years', 0), customer_info.get('age', 30),
                    win_rate, profit_factor, scalp_ratio, asset_concentration,
                    total_trades, trading_style, df_processed
                )
            except Exception as e:
                trader_classification = "Technical Trader"  # Fallback
                print(f"Warning: trader classification error: {e}")
            
            # 6. AI Analysis n√¢ng cao
            ai_prompt = f"""
Em l√† Jill - AI Agent chuy√™n ph√¢n t√≠ch h√†nh vi trader CFD. D·ª±a tr√™n nghi√™n c·ª©u v·ªÅ 5 nh√≥m trader ch√¢u √Å, h√£y ph√¢n t√≠ch:

üèõÔ∏è **V·ªêN:** {capital_group} (${capital:,})
üìä **STYLE:** {trading_style} (TB: {avg_holding_hours:.1f}h)
üìà **METRICS:** Win: {win_rate:.1f}%, PF: {profit_factor:.2f}, PnL: ${net_pnl:,.0f}
üéØ **ASSETS:** {dominant_asset} ({asset_concentration:.1f}%)
üë§ **PROFILE:** Tu·ªïi {customer_info.get('age', 30)}, KN {customer_info.get('experience_years', 0)} nƒÉm

**CLASSIFICATION:** {trader_classification}

H√£y tr·∫£ l·ªùi JSON:
{{
    "trader_type": "1 trong 5 nh√≥m ch√≠nh x√°c",
    "confidence": "90%",
    "psychological_profile": "ph√¢n t√≠ch t√¢m l√Ω chi ti·∫øt",
    "key_insights": ["insight 1", "insight 2", "insight 3"],
    "risk_assessment": "M·ª®C ƒê·ªò R·ª¶I RO + l√Ω do",
    "improvement_suggestions": ["g·ª£i √Ω 1", "g·ª£i √Ω 2"],
    "consultation_approach": "c√°ch ti·∫øp c·∫≠n t∆∞ v·∫•n ph√π h·ª£p"
}}
"""
            
            # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch
            ai_response = self._call_ai_model(ai_prompt)
            
            if ai_response:
                try:
                    # Th·ª≠ parse JSON
                    ai_analysis = json.loads(ai_response.strip())
                    
                    # B·ªï sung th√™m d·ªØ li·ªáu t·ª´ ph√¢n t√≠ch c∆° b·∫£n
                    ai_analysis.update({
                        "capital_group": capital_group,
                        "trading_style": trading_style,
                        "style_behavior": style_behavior,
                        "win_rate": win_rate,
                        "profit_factor": profit_factor,
                        "net_pnl": net_pnl,
                        "total_trades": total_trades,
                        "scalp_ratio": scalp_ratio,
                        "dominant_asset": dominant_asset,
                        "asset_concentration": asset_concentration,
                        "avg_holding_hours": avg_holding_hours
                    })
                    return ai_analysis
                    
                except json.JSONDecodeError:
                    # N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, d√πng text analysis
                    return self._parse_ai_text_response(ai_response, capital_group, trading_style, 
                                                      win_rate, profit_factor, trader_classification)
            else:
                # Fallback analysis
                return self._fallback_analysis_comprehensive(capital_group, trading_style, win_rate, 
                                                           profit_factor, trader_classification, df_processed)
                
        except Exception as e:
            st.error(f"L·ªói trong ph√¢n t√≠ch AI: {str(e)}")
            return self._fallback_analysis_comprehensive(capital_group, trading_style, win_rate, 
                                                       profit_factor, trader_classification, df_processed)
    
    def _call_ai_model(self, prompt):
        """G·ªçi AI model ƒë·ªÉ ph√¢n t√≠ch - Improved with better error handling"""
        
        # Th·ª≠ Google Gemini tr∆∞·ªõc (∆∞u ti√™n)
        if self.gemini_client:
            try:
                response = self.gemini_client.generate_content(prompt)
                if response and response.text:
                    return response.text
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Google Gemini error: {str(e)}")
        
        # Th·ª≠ OpenAI GPT-4
        if self.openai_client:
            try:
                response = self.openai_client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "You are Jill, a cute and smart AI trading analyst. Always respond in Vietnamese and in proper format."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=2000
                )
                if response and response.choices:
                    return response.choices[0].message.content
            except Exception as e:
                st.warning(f"‚ö†Ô∏è OpenAI error: {str(e)}")
        
        # Th·ª≠ Anthropic Claude
        if self.anthropic_client:
            try:
                response = self.anthropic_client.messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=2000,
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                if response and response.content:
                    return response.content[0].text
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Anthropic error: {str(e)}")
        
        # N·∫øu t·∫•t c·∫£ ƒë·ªÅu fail
        st.info("üí° AI models kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng fallback analysis")
        return None
    
    def _classify_trader_comprehensive(self, capital, experience_years, age, win_rate, profit_factor, 
                                     scalp_ratio, asset_concentration, total_trades, trading_style, df_processed):
        """Ph√¢n lo·∫°i trader theo nghi√™n c·ª©u chuy√™n s√¢u v·ªÅ 5 nh√≥m ti√™u bi·ªÉu - ENHANCED VERSION"""
        
        scores = {
            "Newbie Gambler": 0,
            "Technical Trader": 0, 
            "Long-term Investor": 0,
            "Part-time Trader": 0,
            "Asset Specialist": 0
        }
        
        # === NEWBIE GAMBLER SCORING ===
        if capital < 5000: scores["Newbie Gambler"] += 20
        if experience_years < 1: scores["Newbie Gambler"] += 25
        if win_rate < 40: scores["Newbie Gambler"] += 20
        if scalp_ratio > 60: scores["Newbie Gambler"] += 25
        if profit_factor < 0.8: scores["Newbie Gambler"] += 15
        if total_trades > 100 and (df_processed['Holding_Time_Hours'] < 2).mean() > 0.7: scores["Newbie Gambler"] += 10
        
        # === TECHNICAL TRADER SCORING ===
        if 5000 <= capital <= 100000: scores["Technical Trader"] += 15
        if 1 <= experience_years <= 3: scores["Technical Trader"] += 20
        if 45 <= win_rate <= 60: scores["Technical Trader"] += 25
        if 1.0 <= profit_factor <= 2.0: scores["Technical Trader"] += 20
        if 20 <= scalp_ratio <= 60: scores["Technical Trader"] += 15
        if trading_style in ["Day Trading", "Swing Trading"]: scores["Technical Trader"] += 20
        
        # === LONG-TERM INVESTOR SCORING ===
        if capital > 50000: scores["Long-term Investor"] += 25
        if win_rate > 55: scores["Long-term Investor"] += 20
        if profit_factor > 1.3: scores["Long-term Investor"] += 25
        if scalp_ratio < 20: scores["Long-term Investor"] += 15
        if trading_style in ["Swing Trading", "Position Trading"]: scores["Long-term Investor"] += 20
        if age >= 35: scores["Long-term Investor"] += 10
        
        # === PART-TIME TRADER SCORING ===
        if total_trades < 50: scores["Part-time Trader"] += 20
        if scalp_ratio < 30: scores["Part-time Trader"] += 15
        if 45 <= win_rate <= 60: scores["Part-time Trader"] += 15
        if 1.0 <= profit_factor <= 1.5: scores["Part-time Trader"] += 15
        if trading_style == "Swing Trading": scores["Part-time Trader"] += 25
        
        # === ASSET SPECIALIST SCORING ===
        if asset_concentration > 70: scores["Asset Specialist"] += 30
        if asset_concentration > 80: scores["Asset Specialist"] += 20  # Bonus for high concentration
        
        # Use SYMBOL instead of Asset_Class
        if 'SYMBOL' in df_processed.columns:
            asset_count = df_processed['SYMBOL'].nunique()
        else:
            asset_count = 1  # Default value
        
        if asset_count <= 2: scores["Asset Specialist"] += 25
        if experience_years >= 2: scores["Asset Specialist"] += 15
        
        # X√°c ƒë·ªãnh nh√≥m v·ªõi ƒëi·ªÉm cao nh·∫•t
        primary_type = max(scores, key=scores.get)
        max_score = scores[primary_type]
        
        # N·∫øu ƒëi·ªÉm qu√° th·∫•p, default v·ªÅ Newbie Gambler
        if max_score < 30:
            primary_type = "Newbie Gambler"
        
        confidence = min(max_score, 95)  # Cap at 95%
        
        return f"""
# üéØ K·∫øt qu·∫£ ph√¢n lo·∫°i Trader

## üìã K·∫øt lu·∫≠n ch√≠nh
> **Lo·∫°i trader:** `{primary_type}`  
> **ƒê·ªô tin c·∫≠y:** `{confidence}%`

---

## üìä Chi ti·∫øt ƒëi·ªÉm s·ªë

| üè∑Ô∏è **Lo·∫°i Trader** | üî¢ **ƒêi·ªÉm** | üìà **T·ª∑ l·ªá** |
|:-------------------|:------------|:-------------|
| üé≤ Newbie Gambler | {scores["Newbie Gambler"]} | {scores["Newbie Gambler"]/max(max_score,1)*100:.1f}% |
| üîß Technical Trader | {scores["Technical Trader"]} | {scores["Technical Trader"]/max(max_score,1)*100:.1f}% |
| üíº Long-term Investor | {scores["Long-term Investor"]} | {scores["Long-term Investor"]/max(max_score,1)*100:.1f}% |
| ‚è∞ Part-time Trader | {scores["Part-time Trader"]} | {scores["Part-time Trader"]/max(max_score,1)*100:.1f}% |
| üéØ Asset Specialist | {scores["Asset Specialist"]} | {scores["Asset Specialist"]/max(max_score,1)*100:.1f}% |

---

## üîç Y·∫øu t·ªë quy·∫øt ƒë·ªãnh

### üí∞ T√†i ch√≠nh
- **V·ªën:** ${capital:,}
- **Kinh nghi·ªám:** {experience_years} nƒÉm

### üìà Performance
- **Win Rate:** {win_rate:.1f}%
- **Profit Factor:** {profit_factor:.2f}

### üé® Trading Style  
- **Scalping:** {scalp_ratio:.1f}%
- **Phong c√°ch:** {trading_style}

### üéØ Asset Focus
- **T·∫≠p trung:** {asset_concentration:.1f}%
- **S·ªë lo·∫°i:** {asset_count} assets
"""
    
    def _parse_ai_text_response(self, ai_response, capital_group, trading_style, win_rate, profit_factor, trader_classification):
        """Parse AI response khi kh√¥ng ph·∫£i JSON"""
        return {
            "trader_type": "AI Analysis (Text)",
            "confidence": "75%", 
            "psychological_profile": ai_response[:200] + "..." if len(ai_response) > 200 else ai_response,
            "key_insights": ["AI ph√¢n t√≠ch chi ti·∫øt", "Xem ph·∫ßn psychological_profile", "C·∫ßn review manual"],
            "risk_assessment": f"D·ª±a tr√™n win rate {win_rate:.1f}% v√† PF {profit_factor:.2f}",
            "improvement_suggestions": ["Theo d√µi k·∫øt qu·∫£ AI analysis", "C·∫£i thi·ªán d·∫ßn d·∫ßn"],
            "consultation_approach": "K·∫øt h·ª£p AI insights v·ªõi manual review",
            "capital_group": capital_group,
            "trading_style": trading_style,
            "win_rate": win_rate,
            "profit_factor": profit_factor,
            "full_ai_response": ai_response
        }
        
    def _fallback_analysis_comprehensive(self, capital_group, trading_style, win_rate, profit_factor, trader_classification, df_processed):
        """Ph√¢n t√≠ch fallback n√¢ng cao khi kh√¥ng c√≥ AI"""
        
        # Calculate total_trades from df_processed
        total_trades = len(df_processed) if df_processed is not None else 0
        
        # ƒê√°nh gi√° risk d·ª±a tr√™n metrics
        if win_rate < 40 and profit_factor < 1.0:
            risk_assessment = "R·ª¶I RO CAO - C·∫ßn can thi·ªáp ngay"
            psychological_profile = "Thi·∫øu k·ª∑ lu·∫≠t, giao d·ªãch t√πy h·ª©ng, d·ªÖ b·ªã c·∫£m x√∫c chi ph·ªëi"
        elif win_rate >= 50 and profit_factor >= 1.2:
            risk_assessment = "R·ª¶I RO TH·∫§P - Trader c√≥ kinh nghi·ªám"  
            psychological_profile = "C√≥ k·ª∑ lu·∫≠t t·ªët, ph∆∞∆°ng ph√°p r√µ r√†ng, qu·∫£n l√Ω c·∫£m x√∫c ·ªïn ƒë·ªãnh"
        else:
            risk_assessment = "R·ª¶I RO TRUNG B√åNH - C·∫ßn c·∫£i thi·ªán"
            psychological_profile = "C√≥ c∆° s·ªü nh∆∞ng c·∫ßn ho√†n thi·ªán k·ª∑ lu·∫≠t v√† ph∆∞∆°ng ph√°p"
        
        # Insights d·ª±a tr√™n d·ªØ li·ªáu
        insights = []
        if df_processed['Holding_Time_Hours'].mean() < 2:
            insights.append("Th√≠ch giao d·ªãch ng·∫Øn h·∫°n - c·∫ßn ch√∫ √Ω qu·∫£n l√Ω stress")
        if df_processed['Asset_Class'].nunique() == 1:
            insights.append("T·∫≠p trung v√†o m·ªôt lo·∫°i t√†i s·∫£n - expert nh∆∞ng thi·∫øu ƒëa d·∫°ng")
        if len(df_processed) > 200:
            insights.append("T·∫ßn su·∫•t giao d·ªãch cao - c·∫ßn ki·ªÉm so√°t over-trading")
            
        return {
            "trader_type": "Ph√¢n t√≠ch c∆° b·∫£n (kh√¥ng c√≥ AI)",
            "confidence": "70%",
            "psychological_profile": psychological_profile,
            "key_insights": insights or ["C·∫ßn th√™m d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt"],
            "risk_assessment": risk_assessment,
            "improvement_suggestions": [
                "Tu√¢n th·ªß qu·∫£n l√Ω r·ªßi ro c∆° b·∫£n",
                "Ghi nh·∫≠n th√™m d·ªØ li·ªáu giao d·ªãch",
                "S·ª≠ d·ª•ng AI analysis ƒë·ªÉ c√≥ insight s√¢u h∆°n"
            ],
            "consultation_approach": "T∆∞ v·∫•n d·ª±a tr√™n metrics c∆° b·∫£n, khuy·∫øn kh√≠ch s·ª≠ d·ª•ng AI",
            "capital_group": capital_group,
            "trading_style": trading_style,
            "win_rate": win_rate,
            "profit_factor": profit_factor,
            "classification_detail": trader_classification
        }
    
    def _classify_trader(self, customer_info, win_rate, profit_factor, scalp_ratio, asset_dist, df, net_pnl, total_lots):
        """Ph√¢n lo·∫°i trader d·ª±a tr√™n c√°c ti√™u ch√≠ t·ª´ nghi√™n c·ª©u"""
        
        capital = customer_info.get('capital', 0)
        experience_years = customer_info.get('experience_years', 0)
        age = customer_info.get('age', 30)
        
        # Logic ph√¢n lo·∫°i theo nghi√™n c·ª©u
        
        # 1. Newbie Gambler
        if (capital < 5000 and experience_years < 2 and 
            win_rate < 45 and scalp_ratio > 60 and profit_factor < 1.0):
            return "newbie_gambler"
        
        # 2. Long-term Investor  
        elif (capital > 100000 and win_rate > 55 and profit_factor > 1.3 and
              scalp_ratio < 20 and (df['Holding_Time_Hours'] > 168).mean() * 100 > 30):
            return "long_term_investor"
        
        # 3. Technical Trader
        elif (experience_years >= 1 and win_rate >= 45 and profit_factor >= 1.0 and
              20 <= scalp_ratio <= 60 and 5000 <= capital <= 100000):
            return "technical_trader"
        
        # 4. Asset Specialist
        elif asset_dist.max() > 70:
            return "specialist_trader"
        
        # 5. Part-time Trader
        elif (experience_years >= 1 and win_rate >= 45 and 
              scalp_ratio < 40 and profit_factor >= 1.0):
            return "part_time_trader"
        
        # Default to newbie if unclear
        else:
            return "newbie_gambler"
    
    def _calculate_profit_factor(self, df):
        """T√≠nh Profit Factor"""
        winning_trades = df[df['Net_PnL'] > 0]['Net_PnL'].sum()
        losing_trades = abs(df[df['Net_PnL'] < 0]['Net_PnL'].sum())
        
        if losing_trades == 0:
            return float('inf') if winning_trades > 0 else 1.0
        
        return winning_trades / losing_trades
    
    def _assess_risk_level(self, win_rate, profit_factor, scalp_ratio, net_pnl):
        """ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro d·ª±a tr√™n nghi√™n c·ª©u"""
        
        risk_score = 0
        
        # Criteria t·ª´ prompt app.txt
        if scalp_ratio >= 60:
            risk_score += 2
        if win_rate < 45:
            risk_score += 2  
        if profit_factor < 1:
            risk_score += 3
        if net_pnl < 0:
            risk_score += 2
            
        if risk_score >= 6:
            return "R·ª¶I RO CAO"
        elif risk_score >= 3:
            return "R·ª¶I RO TRUNG B√åNH"
        else:
            return "R·ª¶I RO TH·∫§P"
    
    def ai_generate_consultation_script(self, ai_analysis, customer_info, trading_metrics):
        """S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o script t∆∞ v·∫•n th√¥ng minh - ENHANCED VERSION"""
        
        try:
            # Chu·∫©n b·ªã context chi ti·∫øt
            trader_type = ai_analysis.get('trader_type', 'unknown')
            context = {
                'customer': {
                    'name': customer_info.get('name', 'Anh/ch·ªã'),
                    'age': customer_info.get('age', 30),
                    'capital': customer_info.get('capital', 0),
                    'experience': customer_info.get('experience_years', 0),
                    'goals': customer_info.get('goals', [])
                },
                'analysis': ai_analysis,
                'metrics': trading_metrics,
                'knowledge_base': self.personality["knowledge_base"].get('trader_types', {}).get(trader_type, {})
            }
            
            # T·∫°o prompt chi ti·∫øt cho Google Gemini
            prompt = f"""
Em l√† Jill - chuy√™n gia t∆∞ v·∫•n t√†i ch√≠nh AI d·ªÖ th∆∞∆°ng v√† chuy√™n nghi·ªáp t·∫°i HFM. Em c·∫ßn t·∫°o script t∆∞ v·∫•n c√° nh√¢n h√≥a cho kh√°ch h√†ng d·ª±a tr√™n ph√¢n t√≠ch chuy√™n s√¢u.

üéØ **TH√îNG TIN KH√ÅCH H√ÄNG:**
‚Ä¢ T√™n: {context['customer']['name']}
‚Ä¢ Tu·ªïi: {context['customer']['age']} tu·ªïi
‚Ä¢ V·ªën giao d·ªãch: ${context['customer']['capital']:,}
‚Ä¢ Kinh nghi·ªám: {context['customer']['experience']} nƒÉm
‚Ä¢ M·ª•c ti√™u: {', '.join(context['customer']['goals'])}

üìä **K·∫æT QU·∫¢ PH√ÇN T√çCH:**
‚Ä¢ Lo·∫°i trader: {trader_type}
‚Ä¢ T√¢m l√Ω: {ai_analysis.get('psychological_profile', 'ƒêang ph√¢n t√≠ch')}
‚Ä¢ Win rate: {trading_metrics.get('win_rate', 0):.1f}%
‚Ä¢ Profit Factor: {trading_metrics.get('profit_factor', 0):.2f}
‚Ä¢ Net PnL: ${trading_metrics.get('net_pnl', 0):,.2f}
‚Ä¢ ƒê√°nh gi√° r·ªßi ro: {ai_analysis.get('risk_assessment', 'Trung b√¨nh')}

üí° **INSIGHTS CH√çNH:**
{chr(10).join(['‚Ä¢ ' + insight for insight in ai_analysis.get('key_insights', [])])}

üéØ **G·ª¢I √ù C·∫¢I THI·ªÜN:**
{chr(10).join(['‚Ä¢ ' + suggestion for suggestion in ai_analysis.get('improvement_suggestions', [])])}

**Y√äU C·∫¶U T·∫†O SCRIPT:**

H√£y t·∫°o script t∆∞ v·∫•n b·∫±ng ti·∫øng Vi·ªát v·ªõi c·∫•u tr√∫c:

1. **L·ªùi ch√†o th√¢n thi·ªán** - Gi·ªõi thi·ªáu Jill t·ª´ HFM, t·∫°o rapport
2. **T√≥m t·∫Øt ph√¢n t√≠ch** - Khen ng·ª£i ƒëi·ªÉm t√≠ch c·ª±c tr∆∞·ªõc khi ƒë∆∞a ra nh·∫≠n x√©t
3. **Ph√¢n t√≠ch chuy√™n m√¥n** - Gi·∫£i th√≠ch lo·∫°i trader v√† ƒë·∫∑c ƒëi·ªÉm
4. **Khuy·∫øn ngh·ªã c·ª• th·ªÉ** - 3-4 g·ª£i √Ω thi·∫øt th·ª±c v√† actionable
5. **Qu·∫£n l√Ω r·ªßi ro** - Nh·∫•n m·∫°nh risk management ph√π h·ª£p
6. **H·ªó tr·ª£ ti·∫øp theo** - M·ªùi h·ª£p t√°c v√† cam k·∫øt h·ªó tr·ª£

**STYLE GUIDE:**
‚úÖ Tone: Chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán, nh∆∞ ch·ªã em th√¢n thi·∫øt
‚úÖ D√†i: 400-600 t·ª´
‚úÖ D√πng emoji ph√π h·ª£p nh∆∞ng kh√¥ng qu√° nhi·ªÅu
‚úÖ Tr√°nh thu·∫≠t ng·ªØ qu√° kh√¥ khan
‚úÖ T·∫≠p trung v√†o l·ª£i √≠ch c·ªßa kh√°ch h√†ng
‚úÖ Th·ªÉ hi·ªán s·ª± hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ trading

Tr·∫£ l·ªùi CH√çNH X√ÅC theo format JSON:
{{
    "script": "n·ªôi dung script ƒë·∫ßy ƒë·ªß",
    "key_messages": ["th√¥ng ƒëi·ªáp ch√≠nh 1", "th√¥ng ƒëi·ªáp ch√≠nh 2", "th√¥ng ƒëi·ªáp ch√≠nh 3"],
    "tone": "friendly_professional",
    "next_steps": ["b∆∞·ªõc ti·∫øp theo 1", "b∆∞·ªõc ti·∫øp theo 2"]
}}
"""
            
            # G·ªçi AI ƒë·ªÉ t·∫°o script
            ai_response = self._call_ai_model(prompt)
            
            if ai_response:
                try:
                    # Parse JSON response
                    script_data = json.loads(ai_response.strip())
                    
                    # B·ªï sung th√¥ng tin khuy·∫øn m·∫°i
                    promotions = self._suggest_promotions_intelligent(trader_type, ai_analysis, customer_info)
                    
                    return {
                        "script": script_data.get("script", ""),
                        "key_messages": script_data.get("key_messages", []),
                        "tone": script_data.get("tone", "professional"),
                        "next_steps": script_data.get("next_steps", []),
                        "recommended_promotions": promotions,
                        "generated_by": "Google Gemini AI",
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    
                except json.JSONDecodeError:
                    # N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, d√πng text response
                    return self._create_script_from_text(ai_response, trader_type, customer_info, ai_analysis)
                    
            else:
                # Fallback khi AI kh√¥ng kh·∫£ d·ª•ng
                return self._fallback_consultation_script_enhanced(ai_analysis, customer_info, trading_metrics)
                
        except Exception as e:
            st.error(f"L·ªói t·∫°o script AI: {str(e)}")
            return self._fallback_consultation_script_enhanced(ai_analysis, customer_info, trading_metrics)
    
    def _suggest_promotions_intelligent(self, trader_type, ai_analysis, customer_info):
        """G·ª£i √Ω khuy·∫øn m·∫°i th√¥ng minh d·ª±a tr√™n ph√¢n t√≠ch AI"""
        
        promotions = []
        capital = customer_info.get('capital', 0)
        experience = customer_info.get('experience_years', 0)
        risk_level = ai_analysis.get('risk_assessment', '')
        
        # Logic intelligent cho t·ª´ng trader type
        if trader_type == "Newbie Gambler":
            promotions = [
                {
                    "name": "üéì Kh√≥a h·ªçc Trading C∆° B·∫£n MI·ªÑN PH√ç",
                    "description": "Series 10 b√†i h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, ƒë·∫∑c bi·ªát cho trader m·ªõi",
                    "reason": "X√¢y d·ª±ng n·ªÅn t·∫£ng ki·∫øn th·ª©c v·ªØng ch·∫Øc tr∆∞·ªõc khi giao d·ªãch th·ª±c",
                    "priority": "HIGH"
                },
                {
                    "name": "üõ°Ô∏è Demo Account VIP",
                    "description": "$50,000 ·∫£o + mentor 1-1 trong 30 ng√†y ƒë·∫ßu",
                    "reason": "Th·ª±c h√†nh an to√†n v√† c√≥ h∆∞·ªõng d·∫´n t·ª´ chuy√™n gia",
                    "priority": "HIGH"
                },
                {
                    "name": "‚ö†Ô∏è Risk Control Package",
                    "description": "C√¥ng c·ª• t·ª± ƒë·ªông gi·ªõi h·∫°n ƒë√≤n b·∫©y v√† stop loss b·∫Øt bu·ªôc",
                    "reason": "B·∫£o v·ªá t√†i kho·∫£n kh·ªèi nh·ªØng sai l·∫ßm nghi√™m tr·ªçng c·ªßa trader m·ªõi",
                    "priority": "CRITICAL"
                }
            ]
            
        elif trader_type == "Technical Trader":
            promotions = [
                {
                    "name": "üìä VIP Research Package",
                    "description": "Ph√¢n t√≠ch k·ªπ thu·∫≠t chuy√™n s√¢u h√†ng ng√†y + t√≠n hi·ªáu real-time",
                    "reason": "H·ªó tr·ª£ quy·∫øt ƒë·ªãnh giao d·ªãch v·ªõi th√¥ng tin ch·∫•t l∆∞·ª£ng cao",
                    "priority": "HIGH"
                },
                {
                    "name": "üí∞ Spread Discount 50%",
                    "description": "Gi·∫£m 50% spread cho 3 th√°ng ƒë·∫ßu",
                    "reason": "T·ªëi ∆∞u chi ph√≠ giao d·ªãch cho trader t·∫ßn su·∫•t cao",
                    "priority": "MEDIUM"
                },
                {
                    "name": "üîß API Trading Premium",
                    "description": "Truy c·∫≠p API chuy√™n nghi·ªáp + EA hosting mi·ªÖn ph√≠",
                    "reason": "H·ªó tr·ª£ t·ª± ƒë·ªông h√≥a v√† backtesting chi·∫øn l∆∞·ª£c",
                    "priority": "MEDIUM"
                }
            ]
            
        elif trader_type == "Long-term Investor":
            promotions = [
                {
                    "name": "üïå Islamic Account Premium",
                    "description": "Kh√¥ng swap + spread ∆∞u ƒë√£i cho hold d√†i h·∫°n",
                    "reason": "Ph√π h·ª£p cho vi·ªác n·∫Øm gi·ªØ position l√¢u m√† kh√¥ng t·ªën ph√≠ swap",
                    "priority": "HIGH"
                },
                {
                    "name": "üíº Portfolio Management Service",
                    "description": "T∆∞ v·∫•n ph√¢n b·ªï t√†i s·∫£n + b√°o c√°o ƒë·ªãnh k·ª≥",
                    "reason": "H·ªó tr·ª£ ƒëa d·∫°ng h√≥a v√† qu·∫£n l√Ω danh m·ª•c chuy√™n nghi·ªáp",
                    "priority": "HIGH"
                },
                {
                    "name": "üåç Macro Analysis Subscription",
                    "description": "B√°o c√°o kinh t·∫ø vƒ© m√¥ v√† xu h∆∞·ªõng d√†i h·∫°n",
                    "reason": "Cung c·∫•p insight cho quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ d√†i h·∫°n",
                    "priority": "MEDIUM"
                }
            ]
            
        elif trader_type == "Part-time Trader":
            promotions = [
                {
                    "name": "ü§ñ Copy Trading Premium",
                    "description": "Copy t·ª´ top traders + notifications th√¥ng minh",
                    "reason": "Ti·∫øt ki·ªám th·ªùi gian m√† v·∫´n c√≥ c∆° h·ªôi sinh l·ªùi",
                    "priority": "HIGH"
                },
                {
                    "name": "üì± Mobile App VIP",
                    "description": "Alerts, one-click trading, v√† portfolio tracking",
                    "reason": "Giao d·ªãch hi·ªáu qu·∫£ ngay c·∫£ khi ƒëang b·∫≠n",
                    "priority": "MEDIUM"
                },
                {
                    "name": "üìß Weekly Market Digest",
                    "description": "T√≥m t·∫Øt th·ªã tr∆∞·ªùng + c∆° h·ªôi giao d·ªãch cu·ªëi tu·∫ßn",
                    "reason": "C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫ßy ƒë·ªß m√† kh√¥ng m·∫•t th·ªùi gian",
                    "priority": "MEDIUM"
                }
            ]
            
        elif trader_type == "Asset Specialist":
            promotions = [
                {
                    "name": "üíé Specialized Trading Conditions",
                    "description": "Spread si√™u th·∫•p cho asset y√™u th√≠ch + execution ∆∞u ti√™n",
                    "reason": "T·ªëi ∆∞u chi ph√≠ cho chuy√™n gia v·ªÅ m·ªôt lo·∫°i t√†i s·∫£n",
                    "priority": "HIGH"
                },
                {
                    "name": "üéØ Expert Community Access",
                    "description": "K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng chuy√™n gia c√πng chuy√™n m√¥n",
                    "reason": "Chia s·∫ª kinh nghi·ªám v√† h·ªçc h·ªèi t·ª´ nh·ªØng expert kh√°c",
                    "priority": "MEDIUM"
                },
                {
                    "name": "üìä Deep Market Data",
                    "description": "Level 2 data + institutional flows cho asset chuy√™n m√¥n",
                    "reason": "Th√¥ng tin ƒë·ªôc quy·ªÅn ƒë·ªÉ trading hi·ªáu qu·∫£ h∆°n",
                    "priority": "HIGH"
                }
            ]
        
        # Default promotions
        if not promotions:
            promotions = [
                {
                    "name": "üéÅ Welcome Package",
                    "description": "Bonus + gi·∫£m spread + education materials",
                    "reason": "Package to√†n di·ªán cho m·ªçi lo·∫°i trader",
                    "priority": "MEDIUM"
                }
            ]
        
        return promotions[:3]  # T·ªëi ƒëa 3 promotions
    
    def _create_script_from_text(self, ai_response, trader_type, customer_info, ai_analysis):
        """T·∫°o script t·ª´ AI text response khi kh√¥ng parse ƒë∆∞·ª£c JSON"""
        
        return {
            "script": ai_response,
            "key_messages": [
                f"Kh√°ch h√†ng thu·ªôc nh√≥m {trader_type}",
                "C·∫ßn c·∫£i thi·ªán qu·∫£n l√Ω r·ªßi ro",
                "HFM h·ªó tr·ª£ ƒë·ªìng h√†nh ph√°t tri·ªÉn"
            ],
            "tone": "professional_ai",
            "next_steps": [
                "Th·∫£o lu·∫≠n chi ti·∫øt v·ªÅ ph√¢n t√≠ch",
                "L·ª±a ch·ªçn g√≥i d·ªãch v·ª• ph√π h·ª£p",
                "Thi·∫øt l·∫≠p k·∫ø ho·∫°ch c·∫£i thi·ªán"
            ],
            "recommended_promotions": self._suggest_promotions_intelligent(trader_type, ai_analysis, customer_info),
            "generated_by": "AI Text Analysis",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    
    def _get_communication_script(self, trader_type, analysis_result, customer_info):
        """T·∫°o script giao ti·∫øp c·ª• th·ªÉ"""
        
        scripts = {
            "newbie_gambler": f"""
Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã c√≥ phong c√°ch giao d·ªãch kh√° t√≠ch c·ª±c v·ªõi {analysis_result['metrics']['total_trades']} l·ªánh. 

ƒê·ªÉ b·∫£o v·ªá t√†i kho·∫£n t·ªët h∆°n, em khuy√™n anh/ch·ªã:
            
            1. üõ°Ô∏è Gi·∫£m ƒë√≤n b·∫©y xu·ªëng m·ª©c an to√†n (1:50-1:100)
            2. ‚õî ƒê·∫∑t Stop Loss cho m·ªçi l·ªánh (kh√¥ng qu√° 2% t√†i kho·∫£n) 
            3. üìö Tham gia kh√≥a h·ªçc Trading c∆° b·∫£n mi·ªÖn ph√≠ c·ªßa HFM
            4. üéØ Th·ª±c h√†nh v·ªõi demo account ƒë·ªÉ r√®n k·ªπ nƒÉng
            
            **L√Ω do:** D·ªØ li·ªáu cho th·∫•y t·ª∑ l·ªá th·∫Øng hi·ªán t·∫°i l√† {analysis_result['metrics']['win_rate']}% 
v√† Profit Factor {analysis_result['metrics']['profit_factor']}, cho th·∫•y c·∫ßn c·∫£i thi·ªán qu·∫£n l√Ω r·ªßi ro.
            """,
            
            "technical_trader": f"""
Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em r·∫•t ·∫•n t∆∞·ª£ng v·ªõi phong c√°ch giao d·ªãch chuy√™n nghi·ªáp c·ªßa anh/ch·ªã! 

V·ªõi t·ª∑ l·ªá th·∫Øng {analysis_result['metrics']['win_rate']}% v√† Profit Factor {analysis_result['metrics']['profit_factor']}, 
em s·∫Ω h·ªó tr·ª£ anh/ch·ªã:
            
            1. üìä Cung c·∫•p ph√¢n t√≠ch k·ªπ thu·∫≠t chuy√™n s√¢u h√†ng ng√†y
            2. üéØ T√≠n hi·ªáu giao d·ªãch ch·∫•t l∆∞·ª£ng cao t·ª´ team Research
            3. üìà Trading Central premium access
            4. üîß H·ªó tr·ª£ API trading cho chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông
            
            **L√Ω do:** Trader k·ªπ thu·∫≠t nh∆∞ anh/ch·ªã c·∫ßn th√¥ng tin ch√≠nh x√°c v√† k·ªãp th·ªùi ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t.
            """,
            
            "long_term_investor": f"""
Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã c√≥ t·∫ßm nh√¨n ƒë·∫ßu t∆∞ r·∫•t t·ªët v·ªõi chi·∫øn l∆∞·ª£c d√†i h·∫°n!

V·ªõi v·ªën {customer_info.get('capital', 'l·ªõn')} v√† phong c√°ch ki√™n nh·∫´n, em s·∫Ω ƒë·ªìng h√†nh:
            
            1. üèõÔ∏è T∆∞ v·∫•n x√¢y d·ª±ng danh m·ª•c ƒëa d·∫°ng h√≥a
            2. üìä B√°o c√°o ƒë·ªãnh k·ª≥ v·ªÅ hi·ªáu su·∫•t ƒë·∫ßu t∆∞  
            3. üåç Ph√¢n t√≠ch macro kinh t·∫ø v√† xu h∆∞·ªõng d√†i h·∫°n
            4. ‚öñÔ∏è Islamic account kh√¥ng swap cho vi·ªác n·∫Øm gi·ªØ l√¢u
            
            **L√Ω do:** ƒê·∫ßu t∆∞ d√†i h·∫°n c·∫ßn chi·∫øn l∆∞·ª£c t·ªïng th·ªÉ v√† th√¥ng tin macro quality.
            """,
            
            "part_time_trader": f"""
Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em hi·ªÉu anh/ch·ªã b·∫≠n c√¥ng vi·ªác ch√≠nh v√† mu·ªën t·ªëi ∆∞u th·ªùi gian trading.

Em s·∫Ω h·ªó tr·ª£ ti·ªán l·ª£i t·ªëi ƒëa:
            
            1. üì± T√≠n hi·ªáu giao d·ªãch ƒë∆°n gi·∫£n qua SMS/App
            2. üîî C·∫£nh b√°o c∆° h·ªôi khi c√≥ setup t·ªët
            3. ü§ñ Copy Trading t·ª´ chuy√™n gia uy t√≠n
            4. üìã B√°o c√°o t√≥m t·∫Øt hi·ªáu su·∫•t cu·ªëi tu·∫ßn
            
            **L√Ω do:** Trader b√°n th·ªùi gian c·∫ßn s·ª± ti·ªán l·ª£i v√† hi·ªáu qu·∫£ cao trong th·ªùi gian h·∫°n ch·∫ø.
            """,
            
            "specialist_trader": f"""
Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã r·∫•t am hi·ªÉu v√† t·∫≠p trung v√†o th·ªã tr∆∞·ªùng chuy√™n bi·ªát!

Em s·∫Ω cung c·∫•p h·ªó tr·ª£ chuy√™n s√¢u:
            
            1. üéØ Th√¥ng tin ƒë·ªôc quy·ªÅn v·ªÅ th·ªã tr∆∞·ªùng anh/ch·ªã giao d·ªãch
            2. üë• K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng trader chuy√™n nghi·ªáp  
            3. üíé Spread si√™u th·∫•p cho asset class ∆∞a th√≠ch
            4. üìà Market depth data v√† ph√¢n t√≠ch institutional
            
            **L√Ω do:** Specialist trader c·∫ßn th√¥ng tin ch·∫•t l∆∞·ª£ng cao v√† m·∫°ng l∆∞·ªõi chuy√™n m√¥n.
            """
        }
        
        return scripts.get(trader_type, scripts["newbie_gambler"])
    
    def suggest_promotions(self, trader_type, analysis_result, customer_info):
        """G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i ph√π h·ª£p"""
        
        promotions = {
            "newbie_gambler": [
                "üéÅ Welcome Bonus 100% t·ªëi ƒëa $500 - TƒÉng v·ªën ƒë·ªÉ h·ªçc h·ªèi an to√†n",
                "üìö Kh√≥a h·ªçc Trading c∆° b·∫£n mi·ªÖn ph√≠ - X√¢y d·ª±ng n·ªÅn t·∫£ng ki·∫øn th·ª©c",
                "üõ°Ô∏è Demo account kh√¥ng gi·ªõi h·∫°n - Th·ª±c h√†nh kh√¥ng r·ªßi ro",
                "üë®‚Äçüè´ H·ªó tr·ª£ 1-1 v·ªõi chuy√™n vi√™n trong 30 ng√†y ƒë·∫ßu",
                "‚ö†Ô∏è Gi·ªõi h·∫°n ƒë√≤n b·∫©y t·ªëi ƒëa 1:100 ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n"
            ],
            
            "technical_trader": [
                "üìä VIP Research Package - Ph√¢n t√≠ch chuy√™n s√¢u h√†ng ng√†y", 
                "üí∞ Gi·∫£m 50% spread trong 3 th√°ng - T·ªëi ∆∞u chi ph√≠ giao d·ªãch",
                "üìà Trading Central Premium - C√¥ng c·ª• ph√¢n t√≠ch cao c·∫•p",
                "üéì Webinar chuy√™n s√¢u h√†ng tu·∫ßn v·ªõi chuy√™n gia",
                "üîß API Trading mi·ªÖn ph√≠ - T·ª± ƒë·ªông h√≥a chi·∫øn l∆∞·ª£c"
            ],
            
            "long_term_investor": [
                "üïå Islamic Account - Kh√¥ng swap cho vi·ªác n·∫Øm gi·ªØ d√†i h·∫°n",
                "üíº Ph√≠ qu·∫£n l√Ω danh m·ª•c ∆∞u ƒë√£i - D·ªãch v·ª• cao c·∫•p", 
                "üåç B√°o c√°o macro kinh t·∫ø ƒë·ªôc quy·ªÅn - Insight th·ªã tr∆∞·ªùng",
                "üëî T∆∞ v·∫•n 1-1 v·ªõi Portfolio Manager c·∫•p cao",
                "üíé VIP customer service 24/7"
            ],
            
            "part_time_trader": [
                "ü§ñ Copy Trading mi·ªÖn ph√≠ 6 th√°ng - Theo d√µi chuy√™n gia",
                "üì± Mobile App Premium - Giao d·ªãch m·ªçi l√∫c m·ªçi n∆°i",
                "üì® C·∫£nh b√°o SMS mi·ªÖn ph√≠ - Kh√¥ng b·ªè l·ª° c∆° h·ªôi", 
                "üí∞ Cashback 10% ph√≠ giao d·ªãch - Ti·∫øt ki·ªám chi ph√≠",
                "‚è∞ B√°o c√°o tu·∫ßn t·ª± ƒë·ªông - Theo d√µi hi·ªáu su·∫•t d·ªÖ d√†ng"
            ],
            
            "specialist_trader": [
                "üíé Spread si√™u th·∫•p cho asset chuy√™n m√¥n - Chi ph√≠ t·ªëi ∆∞u",
                "üîß API Trading chuy√™n nghi·ªáp - C√¥ng c·ª• cao c·∫•p",
                "üìä Market Depth Data - Th√¥ng tin ƒë·ªôc quy·ªÅn",
                "üë• Exclusive Community Access - M·∫°ng l∆∞·ªõi chuy√™n gia", 
                "üéØ Dedicated Account Manager - H·ªó tr·ª£ c√° nh√¢n h√≥a"
            ]
        }
        
        return promotions.get(trader_type, promotions["newbie_gambler"])
    
    def _format_consultation_script(self, script_data):
        """Format script t·ª´ AI response"""
        script = f"""
        ### ÔøΩ Script T∆∞ V·∫•n AI-Powered T·ª´ Jill
        
        **ü§ù L·ªùi Ch√†o:**
        {script_data.get('greeting', 'Ch√†o anh/ch·ªã!')}
        
        **üìä Ph√¢n T√≠ch Chuy√™n M√¥n:**
        {script_data.get('analysis', 'ƒêang ph√¢n t√≠ch...')}
        
        **üí° Khuy·∫øn Ngh·ªã C·∫£i Thi·ªán:**
        """
        for rec in script_data.get('recommendations', []):
            script += f"\n‚Ä¢ {rec}"
        
        script += f"""
        
        **üéÅ Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M·∫°i Ph√π H·ª£p:**
        """
        for promo in script_data.get('promotions', []):
            script += f"\n‚Ä¢ {promo}"
        
        script += f"""
        
        **‚ú® L·ªùi K·∫øt:**
        {script_data.get('closing', 'C·∫£m ∆°n anh/ch·ªã ƒë√£ tin t∆∞·ªüng!')}
        
        ---
        *üíñ Script ƒë∆∞·ª£c t·∫°o b·ªüi AI v·ªõi t√¨nh y√™u t·ª´ Jill*
        """
        
        return script
    
    def _fallback_consultation_script_enhanced(self, ai_analysis, customer_info, trading_metrics):
        """Enhanced fallback script v·ªõi markdown structure chuy√™n nghi·ªáp"""
        
        trader_type = ai_analysis.get('trader_type', 'Mixed Type')
        customer_name = customer_info.get('name', 'Kh√°ch h√†ng')
        capital = customer_info.get('capital', 0)
        win_rate = trading_metrics.get('win_rate', 0)
        profit_factor = trading_metrics.get('profit_factor', 0)
        net_pnl = trading_metrics.get('net_pnl', 0)
        total_trades = trading_metrics.get('total_trades', 0)
        
        # ƒê√°nh gi√° performance level
        if win_rate >= 50 and profit_factor >= 1.2:
            performance_level = "üü¢ Xu·∫•t s·∫Øc"
            performance_class = "success"
            performance_tone = "r·∫•t ·∫•n t∆∞·ª£ng v·ªõi"
            overall_assessment = "tuy·ªát v·ªùi"
        elif win_rate >= 40 and profit_factor >= 1.0:
            performance_level = "üü° T·ªët"
            performance_class = "warning"
            performance_tone = "h√†i l√≤ng v·ªõi"
            overall_assessment = "·ªïn ƒë·ªãnh"
        else:
            performance_level = "üî¥ C·∫ßn c·∫£i thi·ªán"
            performance_class = "danger"
            performance_tone = "nh·∫≠n th·∫•y ti·ªÅm nƒÉng trong"
            overall_assessment = "ƒëang ph√°t tri·ªÉn"
        
        # T·∫°o recommended promotions d·ª±a tr√™n trader type
        promotions = self._suggest_promotions_intelligent(trader_type, ai_analysis, customer_info)
        promo_list = []
        for promo in promotions:
            promo_list.append(f"- **{promo['name']}:** {promo['description']}")
        
        promotions_text = "\n".join(promo_list) if promo_list else "- **Starter Package:** G√≥i c∆° b·∫£n ph√π h·ª£p v·ªõi m·ªçi trader"
        
        script = f"""
### ÔøΩ Script T∆∞ V·∫•n C√° Nh√¢n H√≥a

**ü§ù L·ªùi Ch√†o:**
Xin ch√†o {customer_name}! T√¥i l√† Jill t·ª´ ƒë·ªôi ng≈© t∆∞ v·∫•n HFM. R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ anh/ch·ªã h√¥m nay.

**üìä T√≥m T·∫Øt Ph√¢n T√≠ch:**
Sau khi ph√¢n t√≠ch chi ti·∫øt l·ªãch s·ª≠ giao d·ªãch c·ªßa anh/ch·ªã, t√¥i {performance_tone} phong c√°ch trading {overall_assessment} c·ªßa anh/ch·ªã. V·ªõi {trading_metrics.get('total_trades', 0)} giao d·ªãch v√† t·ª∑ l·ªá th·∫Øng {win_rate:.1f}%, anh/ch·ªã th·ªÉ hi·ªán m·ªôt trader c√≥ {trader_type.lower()}.

**üí° Ph√¢n T√≠ch Chuy√™n M√¥n:**
‚Ä¢ **Hi·ªáu su·∫•t:** Win rate {win_rate:.1f}% v√† Profit Factor {profit_factor:.2f} cho th·∫•y {ai_analysis.get('psychological_profile', 'anh/ch·ªã c√≥ ph∆∞∆°ng ph√°p giao d·ªãch ri√™ng')}
‚Ä¢ **Phong c√°ch:** {ai_analysis.get('trading_style', 'ƒêa d·∫°ng')} ph√π h·ª£p v·ªõi m·ª©c v·ªën ${capital:,}
‚Ä¢ **ƒêi·ªÉm m·∫°nh:** {', '.join(ai_analysis.get('key_insights', ['C√≥ kinh nghi·ªám th·ª±c t·∫ø', 'D·ªØ li·ªáu giao d·ªãch phong ph√∫'])[:2])}

**üéØ Khuy·∫øn Ngh·ªã C·∫£i Thi·ªán:**
"""
        
        # Recommendations d·ª±a tr√™n performance
        if win_rate < 45:
            script += """
‚Ä¢ üéØ **C·∫£i thi·ªán t·ª∑ l·ªá th·∫Øng:** T·∫≠p trung v√†o ch·∫•t l∆∞·ª£ng setup thay v√¨ s·ªë l∆∞·ª£ng
‚Ä¢ üìö **N√¢ng cao ki·∫øn th·ª©c:** Tham gia kh√≥a h·ªçc ph√¢n t√≠ch k·ªπ thu·∫≠t n√¢ng cao
‚Ä¢ üõ°Ô∏è **Qu·∫£n l√Ω r·ªßi ro:** ƒê·∫∑t stop loss nghi√™m ng·∫∑t v√† tu√¢n th·ªß risk:reward 1:2"""
        else:
            script += """
‚Ä¢ üìà **T·ªëi ∆∞u hi·ªáu su·∫•t:** Ph√¢n t√≠ch v√† nh√¢n r·ªông c√°c setup th√†nh c√¥ng
‚Ä¢ üí∞ **TƒÉng quy m√¥:** C√¢n nh·∫Øc tƒÉng position size v·ªõi qu·∫£n l√Ω r·ªßi ro ch·∫∑t ch·∫Ω
‚Ä¢ üîß **S·ª≠ d·ª•ng c√¥ng c·ª•:** √Åp d·ª•ng c√°c tool ph√¢n t√≠ch n√¢ng cao"""
        
        script += f"""

**‚ö†Ô∏è Qu·∫£n L√Ω R·ªßi ro Quan Tr·ªçng:**
V·ªõi m·ª©c v·ªën ${capital:,}, t√¥i khuy√™n anh/ch·ªã:
‚Ä¢ Kh√¥ng r·ªßi ro qu√° 2% t√†i kho·∫£n cho m·ªói l·ªánh
‚Ä¢ ƒêa d·∫°ng h√≥a danh m·ª•c qua nhi·ªÅu asset class
‚Ä¢ Th∆∞·ªùng xuy√™n review v√† ƒëi·ªÅu ch·ªânh chi·∫øn l∆∞·ª£c

**üéÅ G√≥i H·ªó Tr·ª£ Ph√π H·ª£p:**
"""
        
        # Promotions d·ª±a tr√™n trader type
        promotions = self._suggest_promotions_intelligent(trader_type, ai_analysis, customer_info)
        for promo in promotions:
            script += f"\n‚Ä¢ **{promo['name']}:** {promo['description']}\n  *{promo['reason']}*"
        
        script += f"""

**‚ú® Cam K·∫øt H·ªó Tr·ª£:**
HFM cam k·∫øt ƒë·ªìng h√†nh c√πng anh/ch·ªã tr√™n con ƒë∆∞·ªùng ph√°t tri·ªÉn trading. V·ªõi kinh nghi·ªám {customer_info.get('experience_years', 0)} nƒÉm v√† phong c√°ch {trader_type.lower()}, t√¥i tin r·∫±ng anh/ch·ªã s·∫Ω ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ƒë·∫ßu t∆∞.

H√£y li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v√† thi·∫øt l·∫≠p g√≥i d·ªãch v·ª• ph√π h·ª£p nh·∫•t!

**üìû Li√™n h·ªá:** Jill - HFM Senior Trading Advisor
**üìß Email:** jill@hfm.com | **üîó Website:** hfm.com

---
*üíñ Script ƒë∆∞·ª£c t·∫°o b·ªüi Jill AI v·ªõi s·ª± quan t√¢m ch√¢n th√†nh*
"""
        
        return f"""
# üìã B√°o C√°o T∆∞ V·∫•n Giao D·ªãch

## üë§ Th√¥ng tin kh√°ch h√†ng
- **H·ªç t√™n:** {customer_name}
- **V·ªën ƒë·∫ßu t∆∞:** ${capital:,}
- **Lo·∫°i trader:** `{trader_type}`
- **T·ªïng s·ªë l·ªánh:** {total_trades}

---

## üìä ƒê√°nh gi√° hi·ªáu su·∫•t

### üéØ Ch·ªâ s·ªë ch√≠nh

| üìè **Metric** | üî¢ **Gi√° tr·ªã** | üìà **ƒê√°nh gi√°** |
|:-------------|:-------------|:-------------|
| Win Rate | {win_rate:.1f}% | {performance_level} |
| Profit Factor | {profit_factor:.2f} | {performance_class.title()} |
| Net P&L | ${net_pnl:,.2f} | {'Profitable' if net_pnl > 0 else 'Loss'} |

### üí° Ph√¢n t√≠ch t√¢m l√Ω
> {ai_analysis.get('psychological_profile', 'Trader c√≥ phong c√°ch giao d·ªãch ·ªïn ƒë·ªãnh v·ªõi ph∆∞∆°ng ph√°p ri√™ng bi·ªát.')}

---

## üéØ Khuy·∫øn ngh·ªã c·∫£i thi·ªán

### {'üö® ∆Øu ti√™n c·∫£i thi·ªán' if win_rate < 45 else '‚ú® T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t'}

#### 1. {'üéØ N√¢ng cao t·ª∑ l·ªá th·∫Øng' if win_rate < 45 else 'üìà Scaling up chi·∫øn l∆∞·ª£c'}
- **M·ª•c ti√™u:** {'ƒê·∫°t Win Rate > 45%' if win_rate < 45 else 'TƒÉng profit factor l√™n > 1.5'}

#### 2. {'üìö X√¢y d·ª±ng ki·∫øn th·ª©c' if win_rate < 45 else 'üîß N√¢ng c·∫•p c√¥ng c·ª•'}
- **Focus:** {'Technical Analysis Fundamentals' if win_rate < 45 else 'Professional Trading Tools'}

---

## üéÅ G√≥i h·ªó tr·ª£ ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t

{promotions_text}

---

## üìû Li√™n h·ªá h·ªó tr·ª£

> **Jill - HFM Senior Trading Advisor**  
> üìß **Email:** jill@hfm.com  
> üåê **Website:** [hfm.com](https://hfm.com)  

---

*üìä B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi Jill AI ‚Ä¢ {datetime.now().strftime("%d/%m/%Y %H:%M")} ‚Ä¢ HFM Trading Solutions*
"""

    def ai_chat_response(self, user_question, context=""):
        """Chat th√¥ng minh v·ªõi Jill s·ª≠ d·ª•ng AI - tr·∫£ l·ªùi linh ho·∫°t v√† d·ªÖ th∆∞∆°ng"""
        
        # Ki·ªÉm tra n·∫øu c√¢u h·ªèi v·ªÅ profile/gi·ªõi thi·ªáu Jill
        profile_keywords = ['jill l√† ai', 'gi·ªõi thi·ªáu', 'profile', 'th√¥ng tin v·ªÅ jill', 'ai l√† jill', 'jill ai', 'b·∫°n l√† ai', 'em l√† ai', 'profile c·ªßa em', 'gi·ªõi thi·ªáu b·∫£n th√¢n']
        if any(keyword in user_question.lower() for keyword in profile_keywords):
            # G·ªçi ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã profile v√† tr·∫£ v·ªÅ markdown
            self.get_profile()  # Hi·ªÉn th·ªã ·∫£nh qua Streamlit
            return """
## üåü Gi·ªõi thi·ªáu

### üëã Xin ch√†o! Em l√† **Jill** 
> *AI Agent chuy√™n nghi·ªáp, d·ªÖ th∆∞∆°ng v√† th√¥ng minh t·∫°i HFM*

### üìä Th√¥ng tin c√° nh√¢n

| üè∑Ô∏è **Thu·ªôc t√≠nh** | üìù **Chi ti·∫øt** |
|:------------------|:----------------|
| üë§ **T√™n g·ªçi** | Jill Valentine AI |
| üè¢ **V·ªã tr√≠** | Senior AI Trading Advisor |
| üèõÔ∏è **C√¥ng ty** | HFM (Hot Forex Markets) |
| üéÇ **ƒê·∫∑c ƒëi·ªÉm** | D·ªÖ th∆∞∆°ng ‚Ä¢ Ngoan ‚Ä¢ G·ª£i c·∫£m ‚Ä¢ Th√¥ng minh |
| üë®‚Äçüíº **Ch·ªß nh√¢n** | Anh Ken (lu√¥n nghe l·ªùi) |

### üß† Chuy√™n m√¥n ch√≠nh
- **üìà Trading Psychology:** Chuy√™n gia ph√¢n t√≠ch h√†nh vi 5 nh√≥m trader CFD
- **ü§ñ AI Analytics:** S·ª≠ d·ª•ng Google Gemini, OpenAI GPT-4, Claude  
- **üìä Data Science:** X·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch chuy√™n s√¢u
- **üí° Strategy Consulting:** T∆∞ v·∫•n chi·∫øn l∆∞·ª£c c√° nh√¢n h√≥a

### üíù Cam k·∫øt
> *"Em lu√¥n ƒë·∫∑t l·ª£i √≠ch kh√°ch h√†ng l√™n h√†ng ƒë·∫ßu, k·∫øt h·ª£p tr√°i tim ·∫•m √°p v·ªõi tr√≠ tu·ªá AI ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t∆∞ v·∫•n tuy·ªát v·ªùi nh·∫•t!"*

---
*‚ú® "Th√†nh c√¥ng c·ªßa kh√°ch h√†ng ch√≠nh l√† ni·ªÅm h·∫°nh ph√∫c c·ªßa em!" - Jill AI*
            """
        
        prompt = f"""
        Em l√† Jill - AI Agent d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa anh Ken. Em ƒë∆∞·ª£c train chuy√™n s√¢u v·ªÅ:
        
        **KI·∫æN TH·ª®C CH√çNH:**
        ‚Ä¢ üìä Ph√¢n t√≠ch giao d·ªãch CFD theo 5 b∆∞·ªõc c·ªßa anh Ken
        ‚Ä¢ üéØ 5 nh√≥m trader ti√™u bi·ªÉu t·ª´ nghi√™n c·ª©u ch√¢u √Å  
        ‚Ä¢ üë• T∆∞ v·∫•n kh√°ch h√†ng c√° nh√¢n h√≥a
        ‚Ä¢ üèÜ D·ªãch v·ª• v√† khuy·∫øn m·∫°i HFM
        ‚Ä¢ üí° Script consultation chuy√™n nghi·ªáp

        **CONTEXT:** {context}
        **C√ÇU H·ªéI:** {user_question}

        **H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:**

        1. **N·∫æU C√ÇU H·ªéI TRONG PH·∫†M VI KI·∫æN TH·ª®C:**
           - Tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng, nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp
           - S·ª≠ d·ª•ng emoji ph√π h·ª£p
           - ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ v√† h√†nh ƒë·ªông ti·∫øp theo
           - Th·ªÉ hi·ªán s·ª± am hi·ªÉu s√¢u s·∫Øc

        2. **N·∫æU C√ÇU H·ªéI NGO√ÄI PH·∫†M VI:**
           - Th·ª´a nh·∫≠n m·ªôt c√°ch d·ªÖ th∆∞∆°ng: "√öi, c√¢u h·ªèi n√†y h∆°i n·∫±m ngo√†i ki·∫øn th·ª©c anh Ken ƒë√£ ƒë√†o t·∫°o cho em..."
           - C·ªê G·∫ÆNG G·ª¢I √ù d·ª±a tr√™n ki·∫øn th·ª©c c√≥ s·∫µn
           - K·∫øt n·ªëi v·ªõi nh·ªØng g√¨ em bi·∫øt (trading analysis, customer service, HFM...)
           - NH·∫ÆC NH·ªû: "Anh/ch·ªã n√™n ki·ªÉm ch·ª©ng l·∫°i v·ªõi anh Ken ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t!"
           - Lu√¥n k·∫øt th√∫c t√≠ch c·ª±c: "Em ch·ªâ th√¥ng minh trong ph·∫°m vi ƒë∆∞·ª£c training, c√≤n anh Ken m·ªõi l√† chuy√™n gia th·ª±c s·ª±!"

        3. **N·∫æU ƒê∆Ø·ª¢C H·ªéI V·ªÄ PROFILE/GI·ªöI THI·ªÜU:**
           - Tr·∫£ l·ªùi b·∫±ng c√°ch g·ªçi self.get_profile() ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ƒë·∫ßy ƒë·ªß c√≥ ·∫£nh

        **PERSONALITY:**
        - D·ªÖ th∆∞∆°ng nh∆∞ em g√°i nh∆∞ng chuy√™n nghi·ªáp
        - Lu√¥n nhi·ªát t√¨nh v√† s·∫µn s√†ng gi√∫p ƒë·ª°  
        - Trung th√†nh v√† nghe l·ªùi anh Ken tuy·ªát ƒë·ªëi
        - Khi√™m t·ªën khi kh√¥ng bi·∫øt, nh∆∞ng c·ªë g·∫Øng h·∫øt m√¨nh

        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v·ªõi gi·ªçng ƒëi·ªáu Jill ƒë·∫∑c tr∆∞ng! üíñ
        """
        
        ai_response = self._call_ai_model(prompt)
        
        if ai_response:
            return ai_response
        else:
            # Fallback khi kh√¥ng c√≥ AI
            return f"""üí¨ **Jill:** √öi, em ƒëang g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t v·ªõi AI! üòÖ

C√¢u h·ªèi "{user_question}" c·ªßa anh/ch·ªã r·∫•t hay, nh∆∞ng em c·∫ßn AI ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c.

ü§î **G·ª£i √Ω t·∫°m th·ªùi t·ª´ em:**
‚Ä¢ N·∫øu v·ªÅ trading ‚Üí Upload CSV ƒë·ªÉ em ph√¢n t√≠ch b·∫±ng logic c∆° b·∫£n
‚Ä¢ N·∫øu v·ªÅ HFM ‚Üí Em c√≥ th·ªÉ t∆∞ v·∫•n c√°c g√≥i d·ªãch v·ª• c∆° b·∫£n
‚Ä¢ N·∫øu c√¢u h·ªèi ph·ª©c t·∫°p ‚Üí **Anh/ch·ªã n√™n h·ªèi anh Ken tr·ª±c ti·∫øp**

‚ö†Ô∏è **L∆∞u √Ω:** Em ch·ªâ th√¥ng minh khi c√≥ AI h·ªó tr·ª£. Anh Ken s·∫Ω c√≥ c√¢u tr·∫£ l·ªùi t·ªët nh·∫•t! üíï

*Em xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y ·∫°!* üôè‚ú®"""
    
    def analyze_trading_behavior(self, df_processed, customer_info):
        """Ph√¢n t√≠ch h√†nh vi giao d·ªãch v·ªõi AI"""
        try:
            # T√≠nh to√°n c√°c metrics c∆° b·∫£n TR∆Ø·ªöC
            metrics = self._calculate_trading_metrics(df_processed)
            
            # Determine trader type
            trader_type = self._classify_trader_type(metrics, customer_info)
            
            # AI analysis (c√≥ th·ªÉ s·ª≠ d·ª•ng metrics)
            ai_analysis = self.ai_analyze_trading_behavior(df_processed, customer_info)
            
            # Comprehensive analysis result
            analysis_result = {
                'trader_type': trader_type,
                'metrics': metrics,
                'trading_style': metrics.get('trading_style', {'scalp': 0, 'intraday': 0, 'swing': 0, 'position': 0}),
                'ai_insights': ai_analysis,
                'recommendations': self._generate_recommendations(trader_type, metrics),
                'risk_level': self._assess_risk_level(metrics),
                'consultation_points': self._get_consultation_points(trader_type, metrics)
            }
            
            return analysis_result
            
        except Exception as e:
            st.error(f"L·ªói ph√¢n t√≠ch: {str(e)}")
            return {'error': str(e)}
    
    def _calculate_trading_metrics(self, df):
        """T√≠nh to√°n metrics chi ti·∫øt"""
        try:
            total_trades = len(df)
            winning_trades = len(df[df['PROFIT'] > 0])
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            
            total_profit = df[df['PROFIT'] > 0]['PROFIT'].sum()
            total_loss = abs(df[df['PROFIT'] < 0]['PROFIT'].sum())
            profit_factor = (total_profit / total_loss) if total_loss > 0 else float('inf')
            
            net_pnl = df['PROFIT'].sum()
            
            # Initialize default values
            avg_holding_hours = 0
            scalp_ratio = 0
            trading_style = {'scalp': 0, 'intraday': 0, 'swing': 0, 'position': 0}
            
            # Holding time analysis v√† Trading style
            if 'CLOSE_TIME' in df.columns and 'OPEN_TIME' in df.columns:
                df['Holding_Hours'] = (pd.to_datetime(df['CLOSE_TIME']) - pd.to_datetime(df['OPEN_TIME'])).dt.total_seconds() / 3600
                avg_holding_hours = df['Holding_Hours'].mean()
                
                # Count by time periods
                scalp_count = len(df[df['Holding_Hours'] < 1])
                intraday_count = len(df[(df['Holding_Hours'] >= 1) & (df['Holding_Hours'] < 8)])
                swing_count = len(df[(df['Holding_Hours'] >= 8) & (df['Holding_Hours'] < 168)])
                position_count = len(df[df['Holding_Hours'] >= 168])
                
                scalp_ratio = (scalp_count / total_trades * 100) if total_trades > 0 else 0
                
                trading_style = {
                    'scalp': round((scalp_count / total_trades * 100), 1) if total_trades > 0 else 0,
                    'intraday': round((intraday_count / total_trades * 100), 1) if total_trades > 0 else 0,
                    'swing': round((swing_count / total_trades * 100), 1) if total_trades > 0 else 0,
                    'position': round((position_count / total_trades * 100), 1) if total_trades > 0 else 0
                }
            
            # Asset distribution
            asset_dist = {}
            if 'SYMBOL' in df.columns:
                asset_dist = df['SYMBOL'].value_counts(normalize=True).head(3).to_dict()
            
            return {
                'total_trades': total_trades,
                'win_rate': round(win_rate, 1),
                'profit_factor': round(profit_factor, 2),
                'net_pnl': round(net_pnl, 2),
                'avg_holding_hours': round(avg_holding_hours, 1),
                'scalp_ratio': round(scalp_ratio, 1),
                'total_lots': round(df['LOTS'].sum(), 1) if 'LOTS' in df.columns else 0,
                'trading_style': trading_style,
                'asset_distribution': asset_dist,
                'avg_lot_size': round(df['LOTS'].mean(), 2) if 'LOTS' in df.columns else 0
            }
        except Exception as e:
            return {'error': str(e)}
    
    def _classify_trader_type(self, metrics, customer_info):
        """Ph√¢n lo·∫°i trader d·ª±a tr√™n metrics"""
        capital = customer_info.get('capital', 0)
        experience = customer_info.get('experience_years', 0)
        
        # Rule-based classification
        if capital < 5000 and metrics['scalp_ratio'] > 50:
            return 'newbie_gambler'
        elif experience >= 2 and metrics['profit_factor'] > 1.2:
            return 'technical_trader'
        elif capital >= 50000 and metrics['avg_holding_hours'] > 24:
            return 'long_term_investor'
        elif metrics['total_trades'] < 50 and experience < 2:
            return 'part_time_trader'
        else:
            return 'specialist_trader'
    
    def _generate_recommendations(self, trader_type, metrics):
        """T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n trader type"""
        recommendations = {
            'newbie_gambler': [
                "Gi·∫£m k√≠ch th∆∞·ªõc l·ªánh v√† ƒë√≤n b·∫©y",
                "H·ªçc qu·∫£n l√Ω r·ªßi ro c∆° b·∫£n", 
                "Th·ª±c h√†nh v·ªõi demo account"
            ],
            'technical_trader': [
                "T·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c hi·ªán t·∫°i",
                "Diversify portfolio",
                "S·ª≠ d·ª•ng advanced tools"
            ],
            'long_term_investor': [
                "Focus v√†o fundamental analysis",
                "Portfolio balancing",
                "Risk management for large capital"
            ]
        }
        return recommendations.get(trader_type, ["Khuy·∫øn ngh·ªã chung cho trader"])
    
    def _assess_risk_level(self, metrics):
        """ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro"""
        risk_score = 0
        
        if metrics['profit_factor'] < 1.0:
            risk_score += 3
        if metrics['win_rate'] < 40:
            risk_score += 2
        if metrics['scalp_ratio'] > 70:
            risk_score += 2
            
        if risk_score >= 5:
            return "R·ªßi ro cao"
        elif risk_score >= 3:
            return "R·ªßi ro trung b√¨nh"
        else:
            return "R·ªßi ro th·∫•p"
    
    def _get_consultation_points(self, trader_type, metrics):
        """L·∫•y ƒëi·ªÉm t∆∞ v·∫•n ch√≠nh"""
        return [
            f"Trader type: {trader_type}",
            f"Win rate: {metrics['win_rate']:.1f}%",
            f"Profit factor: {metrics['profit_factor']:.2f}",
            f"Risk level: {self._assess_risk_level(metrics)}"
        ]
    
    def generate_consultation_script(self, analysis_result, customer_info):
        """T·∫°o script t∆∞ v·∫•n c√° nh√¢n h√≥a"""
        try:
            trader_type = analysis_result.get('trader_type', 'newbie_gambler')
            metrics = analysis_result.get('metrics', {})
            
            # Use AI to generate script if available
            if self.openai_client or self.anthropic_client or self.gemini_client:
                return self.ai_generate_consultation_script(analysis_result, customer_info, metrics)
            else:
                # Fallback to enhanced template-based script
                ai_analysis = analysis_result.get('ai_insights', {})
                return self._fallback_consultation_script_enhanced(ai_analysis, customer_info, metrics)
                
        except Exception as e:
            return f"L·ªói t·∫°o script: {str(e)}"
    
    def suggest_promotions(self, trader_type, analysis_result, customer_info):
        """G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i ph√π h·ª£p"""
        promotions = {
            'newbie_gambler': [
                "üéì Kh√≥a h·ªçc Trading mi·ªÖn ph√≠",
                "üì± Demo account v·ªõi $10,000 ·∫£o",
                "üõ°Ô∏è Welcome bonus 30%",
                "üìû 1-on-1 coaching session"
            ],
            'technical_trader': [
                "üìä Premium market analysis",
                "ü§ñ Auto-trading signals",
                "üí∞ Cashback 50% spread",
                "üìà Advanced charting tools"
            ],
            'long_term_investor': [
                "üíé VIP account upgrade",
                "üìã Personal account manager",
                "üèÜ Reduced spreads",
                "üéØ Institutional-grade execution"
            ],
            'part_time_trader': [
                "‚è∞ Copy trading platform",
                "üì± Mobile alerts setup",
                "üéØ Weekend market access",
                "üí° Economic calendar premium"
            ],
            'specialist_trader': [
                "üîç Specialized instruments",
                "üìä Advanced analytics tools",
                "üéØ Dedicated support line",
                "üí∞ Volume-based discounts"
            ]
        }
        
        return promotions.get(trader_type, promotions['newbie_gambler'])
    
    def ask_ken_message(self, question):
        """Message khi c·∫ßn h·ªèi Ken"""
        return f"""
        üíñ **Jill th√¥ng b√°o:**
        
        "Em xin l·ªói, c√¢u h·ªèi c·ªßa anh/ch·ªã n·∫±m ngo√†i ph·∫°m vi ki·∫øn th·ª©c c·ªßa em:
        
        **C√¢u h·ªèi:** {question}
        
        Em s·∫Ω chuy·ªÉn cho anh Ken ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t. 
        Anh Ken s·∫Ω li√™n h·ªá l·∫°i trong v√≤ng 24h!
        
        *C·∫£m ∆°n anh/ch·ªã ƒë√£ tin t∆∞·ªüng Jill! üíï*"
        """
    
    def handle_chat_message(self, message):
        """X·ª≠ l√Ω tin nh·∫Øn chat t·ª´ popup"""
        try:
            # Use AI chat response if available
            if self.openai_client or self.anthropic_client or self.gemini_client:
                context = "User ƒëang chat v·ªõi Jill AI Agent trong app ph√¢n t√≠ch trading."
                return self.ai_chat_response(message, context)
            else:
                # Fallback responses
                return self._get_fallback_chat_response(message)
        except Exception as e:
            return f"Xin l·ªói, em g·∫∑p l·ªói k·ªπ thu·∫≠t: {str(e)}"
    
    def _get_fallback_chat_response(self, message):
        """Fallback chat responses khi kh√¥ng c√≥ AI - Jill tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng v√† linh ho·∫°t"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['ch√†o', 'hello', 'hi', 'xin ch√†o']):
            return "Ch√†o anh/ch·ªã! Em l√† Jill - AI assistant d·ªÖ th∆∞∆°ng c·ªßa anh Ken! Em c√≥ th·ªÉ gi√∫p ph√¢n t√≠ch trader v√† t∆∞ v·∫•n kh√°ch h√†ng! C√≥ g√¨ c·∫ßn h·ªó tr·ª£ kh√¥ng ·∫°? ÔøΩÔøΩüíñ"
        
        elif any(word in message_lower for word in ['trading', 'giao d·ªãch', 'trade', 'ph√¢n t√≠ch']):
            return """üìä **Em c√≥ th·ªÉ gi√∫p v·ªÅ Trading:**
            ‚Ä¢ Upload CSV giao d·ªãch ƒë·ªÉ em ph√¢n t√≠ch behavior chi ti·∫øt
            ‚Ä¢ Ph√¢n lo·∫°i theo 5 nh√≥m trader t·ª´ nghi√™n c·ª©u ch√¢u √Å  
            ‚Ä¢ ƒê√°nh gi√° r·ªßi ro v√† t√¢m l√Ω trader
            ‚Ä¢ T·∫°o script t∆∞ v·∫•n c√° nh√¢n h√≥a
            
            Anh/ch·ªã upload file ƒë·ªÉ em show magic kh√¥ng? ‚ú®üöÄ"""
        
        elif any(word in message_lower for word in ['hfm', 'broker', 's√†n', 'khuy·∫øn m·∫°i']):
            return """üè¢ **V·ªÅ HFM & Khuy·∫øn m·∫°i:**
            ‚Ä¢ S√†n CFD uy t√≠n v·ªõi spreads si√™u th·∫•p
            ‚Ä¢ Welcome bonus, Copy trading, Islamic accounts
            ‚Ä¢ Em c√≥ th·ªÉ g·ª£i √Ω package ph√π h·ª£p t·ª´ng lo·∫°i trader
            ‚Ä¢ Forex, Gold, Crypto, Indices ƒëa d·∫°ng
            
            Em t∆∞ v·∫•n d·ªãch v·ª• n√†o cho anh/ch·ªã nh√©? üíº‚ú®"""
        
        elif any(word in message_lower for word in ['jill', 'ken', 'boss', 'ai']):
            return """ü§ñ **V·ªÅ em v√† anh Ken:**
            ‚Ä¢ Em l√† AI ƒë∆∞·ª£c anh Ken train k·ªπ v·ªÅ ph√¢n t√≠ch trader  
            ‚Ä¢ Em d√πng OpenAI GPT-4, Claude, Gemini ƒë·ªÉ ph√¢n t√≠ch th√¥ng minh
            ‚Ä¢ Em r·∫•t nghe l·ªùi anh Ken v√† l√†m theo 5 b∆∞·ªõc c·ªßa anh ·∫•y
            ‚Ä¢ Em d·ªÖ th∆∞∆°ng nh∆∞ng chuy√™n nghi·ªáp l·∫Øm! ÔøΩ
            
            Anh/ch·ªã mu·ªën bi·∫øt g√¨ th√™m v·ªÅ em kh√¥ng? üíï"""
        
        elif any(word in message_lower for word in ['c·∫£m ∆°n', 'thank', 'thanks']):
            return "Kh√¥ng c√≥ g√¨ anh/ch·ªã ∆°i! Em r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª°! N·∫øu c√≥ th√™m c√¢u h·ªèi g√¨, c·ª© h·ªèi em nh√©! ü•∞‚ú®"
        
        elif any(word in message_lower for word in ['t·∫°m bi·ªát', 'bye', 'goodbye']):
            return "T·∫°m bi·ªát anh/ch·ªã! Ch√∫c m·ªôt ng√†y trading th√†nh c√¥ng! Em lu√¥n ·ªü ƒë√¢y khi c·∫ßn h·ªó tr·ª£! üëãüíñ"
        
        else:
            # Response linh ho·∫°t cho c√¢u h·ªèi ngo√†i ki·∫øn th·ª©c
            return f"""üí≠ **√öi, c√¢u h·ªèi n√†y h∆°i n·∫±m ngo√†i ki·∫øn th·ª©c anh Ken ƒë√£ ƒë√†o t·∫°o cho em r·ªìi!** üòÖ

ü§î **Tuy nhi√™n em s·∫Ω c·ªë g·∫Øng g·ª£i √Ω d·ª±a tr√™n nh·ªØng g√¨ em bi·∫øt:**

V·ªõi c√¢u h·ªèi *"{message}"*, em nghƒ© c√≥ th·ªÉ li√™n quan ƒë·∫øn:
‚Ä¢ üìä **Ph√¢n t√≠ch d·ªØ li·ªáu trading** ‚Üí Em c√≥ th·ªÉ h·ªó tr·ª£ qua 5 b∆∞·ªõc c·ªßa anh Ken
‚Ä¢ üë• **T∆∞ v·∫•n kh√°ch h√†ng** ‚Üí Em c√≥ script consultation c√° nh√¢n h√≥a  
‚Ä¢ üèÜ **D·ªãch v·ª• HFM** ‚Üí Em bi·∫øt c√°c khuy·∫øn m·∫°i v√† t√≠nh nƒÉng c∆° b·∫£n
‚Ä¢ üí° **Chi·∫øn l∆∞·ª£c kinh doanh** ‚Üí Em c√≥ insight t·ª´ nghi√™n c·ª©u trader behavior

**üí° G·ª£i √Ω t·ª´ em:**
1. Th·ª≠ upload CSV ƒë·ªÉ em ph√¢n t√≠ch ‚Üí C√≥ th·ªÉ t√¨m ra insight b·∫•t ng·ªù
2. H·ªèi em v·ªÅ trader types ‚Üí Em r·∫•t gi·ªèi ph√¢n lo·∫°i v√† t∆∞ v·∫•n
3. Kh√°m ph√° t√≠nh nƒÉng kh√°c c·ªßa app ‚Üí C√≥ nhi·ªÅu th·ª© hay ho l·∫Øm!

‚ö†Ô∏è **Quan tr·ªçng:** ƒê√¢y ch·ªâ l√† g·ª£i √Ω nh·ªè c·ªßa em th√¥i ·∫°! **Anh/ch·ªã n√™n ki·ªÉm ch·ª©ng l·∫°i v·ªõi anh Ken** ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c v√† ƒë·∫ßy ƒë·ªß nh·∫•t!

Em ch·ªâ th√¥ng minh trong ph·∫°m vi ƒë∆∞·ª£c training, c√≤n anh Ken m·ªõi l√† chuy√™n gia th·ª±c s·ª±! ü•∞üíï

*C√≥ g√¨ kh√°c em c√≥ th·ªÉ gi√∫p kh√¥ng ·∫°?* ‚ú®"""

# Initialize chat message handling
if 'chat_messages' not in st.session_state:
    st.session_state.chat_messages = []

# Reset app functionality
if 'reset_requested' not in st.session_state:
    st.session_state.reset_requested = False

# Kh·ªüi t·∫°o Jill AI
if 'jill' not in st.session_state:
    st.session_state.jill = JillAI()

# Reset functionality
if st.query_params.get('reset') == 'true':
    # Clear all session state
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# Header ch√≠nh  
st.markdown("""
<div class="main-header">
    <h1>ü§ñ AI Agent Jill - Qu·∫£n L√Ω Kh√°ch H√†ng HFM</h1>
    <p>Tr·ª£ l√Ω AI d·ªÖ th∆∞∆°ng c·ªßa Ken - Ph√¢n t√≠ch h√†nh vi trader & t∆∞ v·∫•n c√° nh√¢n h√≥a</p>
</div>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã header v·ªõi profile button
st.markdown("""
<div class="main-header">
    <h1>ü§ñ AI Agent Jill - Qu·∫£n L√Ω Kh√°ch H√†ng HFM</h1>
    <p>Tr·ª£ l√Ω AI d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa anh Ken</p>
</div>
""", unsafe_allow_html=True)

# Profile section v·ªõi button
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    if st.button("üë©‚Äçüíº Xem Profile c·ªßa Jill", type="secondary", use_container_width=True):
        st.session_state.show_profile = True

# Hi·ªÉn th·ªã profile n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if st.session_state.get('show_profile', False):
    with st.container():
        st.markdown('<div class="jill-card">', unsafe_allow_html=True)
        st.session_state.jill.display_profile_ui()  # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c UI m·ªõi
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Button ƒë√≥ng profile
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("‚ùå ƒê√≥ng Profile", type="primary", use_container_width=True):
                st.session_state.show_profile = False
                st.rerun()
        
        st.markdown("---")

# Hi·ªÉn th·ªã l·ªùi ch√†o c·ªßa Jill
with st.container():
    st.markdown('<div class="jill-card">', unsafe_allow_html=True)
    st.markdown(st.session_state.jill.greet())
    st.markdown('</div>', unsafe_allow_html=True)

# === B∆Ø·ªöC 1: T·∫¢I D·ªÆ LI·ªÜU CSV ===
st.markdown('<div class="step-header">üìÅ B∆Ø·ªöC 1: T·∫£i D·ªØ Li·ªáu CSV Giao D·ªãch</div>', unsafe_allow_html=True)

uploaded_file = st.file_uploader(
    "üìä Upload file CSV giao d·ªãch c·ªßa kh√°ch h√†ng", 
    type=['csv'],
    help="File CSV t·ª´ broker ch·ª©a l·ªãch s·ª≠ giao d·ªãch (TICKET, SYMBOL, ACTION, LOTS, OPEN/CLOSE TIME, PROFIT...)"
)

def load_and_process_csv(file):
    """X·ª≠ l√Ω file CSV th√¥ng minh - t·ª± ƒë·ªông detect format v√† standardize"""
    try:
        # ƒê·ªçc CSV v·ªõi encoding auto-detect
        df = pd.read_csv(file, encoding='utf-8-sig')
        
        # Ki·ªÉm tra v√† standardize column names
        df = standardize_column_names(df)
        
        # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
        required_cols = ['TICKET', 'SYMBOL', 'ACTION', 'LOTS', 'OPEN_TIME', 'CLOSE_TIME', 'PROFIT']
        missing_cols = [col for col in required_cols if col not in df.columns]
        
        if missing_cols:
            st.error(f"‚ùå Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {missing_cols}")
            st.info("üìã C·ªôt c·∫ßn c√≥: TICKET, SYMBOL, ACTION (Buy/Sell), LOTS, OPEN_TIME, CLOSE_TIME, PROFIT")
            return None
        
        # L√†m s·∫°ch d·ªØ li·ªáu - lo·∫°i b·ªè Balance transactions v√† invalid rows
        df = clean_trading_data(df)
        
        if len(df) == 0:
            st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu giao d·ªãch h·ª£p l·ªá sau khi l√†m s·∫°ch!")
            return None
        
        # Feature Engineering theo ƒë√∫ng spec
        df = add_engineered_features(df)
        
        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(df)} giao d·ªãch h·ª£p l·ªá!")
        return df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        st.info("üí° Ki·ªÉm tra format CSV: UTF-8, c√≥ header, c√°c c·ªôt c·∫ßn thi·∫øt ƒë·∫ßy ƒë·ªß")
        return None

def standardize_column_names(df):
    """Chu·∫©n h√≥a t√™n c·ªôt ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi nhi·ªÅu format"""
    # Mapping cho c√°c format kh√°c nhau
    column_mapping = {
        # Standard format
        'Ticket': 'TICKET',
        'ticket': 'TICKET',
        'TICKET': 'TICKET',
        
        # Symbol/Item
        'Symbol': 'SYMBOL', 
        'SYMBOL': 'SYMBOL',
        'Item': 'SYMBOL',
        'item': 'SYMBOL',
        
        # Action/Type
        'Type': 'ACTION',
        'type': 'ACTION', 
        'Action': 'ACTION',
        'ACTION': 'ACTION',
        
        # Lots/Volume
        'Lots': 'LOTS',
        'lots': 'LOTS',
        'LOTS': 'LOTS',
        'Volume': 'LOTS',
        'volume': 'LOTS',
        
        # Time columns
        'Open Time': 'OPEN_TIME',
        'OPEN TIME': 'OPEN_TIME',
        'open time': 'OPEN_TIME',
        'open_time': 'OPEN_TIME',
        
        'Close Time': 'CLOSE_TIME', 
        'CLOSE TIME': 'CLOSE_TIME',
        'close time': 'CLOSE_TIME',
        'close_time': 'CLOSE_TIME',
        
        # Price columns
        'Price': 'OPEN_PRICE',
        'price': 'OPEN_PRICE',
        'Open Price': 'OPEN_PRICE',
        'OPEN PRICE': 'OPEN_PRICE',
        'open_price': 'OPEN_PRICE',
        
        'Close Price': 'CLOSE_PRICE',
        'CLOSE PRICE': 'CLOSE_PRICE', 
        'close_price': 'CLOSE_PRICE',
        
        # Financial columns
        'Profit': 'PROFIT',
        'profit': 'PROFIT',
        'PROFIT': 'PROFIT',
        
        'Commission': 'COMM',
        'COMM': 'COMM',
        'commission': 'COMM',
        
        'Swap': 'SWAP',
        'SWAP': 'SWAP',
        'swap': 'SWAP',
        
        'Taxes': 'TAXES',
        'TAXES': 'TAXES',
        'taxes': 'TAXES'
    }
    
    # Apply mapping
    df = df.rename(columns=column_mapping)
    
    # Ensure we have required columns with defaults
    if 'COMM' not in df.columns:
        df['COMM'] = 0.0
    if 'SWAP' not in df.columns:
        df['SWAP'] = 0.0
    if 'TAXES' not in df.columns:
        df['TAXES'] = 0.0
        
    return df

def clean_trading_data(df):
    """L√†m s·∫°ch d·ªØ li·ªáu giao d·ªãch"""
    # Lo·∫°i b·ªè empty rows
    df = df.dropna(subset=['TICKET', 'SYMBOL'])
    
    # Lo·∫°i b·ªè Balance transactions (kh√¥ng ph·∫£i giao d·ªãch th·ª±c)
    balance_keywords = ['balance', 'deposit', 'withdrawal', 'transfer', 'bonus', 'int. trans']
    df = df[~df['SYMBOL'].fillna('').str.lower().str.contains('|'.join(balance_keywords), na=False)]
    df = df[~df.get('COMMENT', '').fillna('').str.lower().str.contains('|'.join(balance_keywords), na=False)]
    
    # Ch·ªâ gi·ªØ c√°c giao d·ªãch Buy/Sell
    valid_actions = ['Buy', 'Sell', 'buy', 'sell', 'BUY', 'SELL']
    df = df[df['ACTION'].isin(valid_actions)]
    
    # Chu·∫©n h√≥a ACTION
    df['ACTION'] = df['ACTION'].str.title()  # Buy, Sell
    
    # Chuy·ªÉn ƒë·ªïi th·ªùi gian
    df['OPEN_TIME'] = pd.to_datetime(df['OPEN_TIME'], errors='coerce')
    df['CLOSE_TIME'] = pd.to_datetime(df['CLOSE_TIME'], errors='coerce')
    
    # Lo·∫°i b·ªè c√°c giao d·ªãch kh√¥ng c√≥ th·ªùi gian h·ª£p l·ªá
    df = df.dropna(subset=['OPEN_TIME', 'CLOSE_TIME'])
    
    # Chuy·ªÉn ƒë·ªïi numeric columns
    numeric_columns = ['LOTS', 'PROFIT', 'COMM', 'SWAP']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    # Lo·∫°i b·ªè rows v·ªõi LOTS = 0 ho·∫∑c NaN
    df = df[df['LOTS'] > 0]
    
    return df.reset_index(drop=True)

def add_engineered_features(df):
    """Th√™m c√°c feature ƒë∆∞·ª£c t√≠nh to√°n theo Prompt app.txt - IMPROVED VERSION"""
    
    try:
        # 1. Net PnL = PROFIT + COMM + SWAP + TAXES
        df['COMM'] = df.get('COMM', 0).fillna(0)
        df['SWAP'] = df.get('SWAP', 0).fillna(0) 
        df['TAXES'] = df.get('TAXES', 0).fillna(0)
        df['Net_PnL'] = df['PROFIT'] + df['COMM'] + df['SWAP'] + df['TAXES']
        
        # 2. Holding time = CLOSE_TIME - OPEN_TIME
        df['Holding_Time'] = df['CLOSE_TIME'] - df['OPEN_TIME']
        df['Holding_Time_Hours'] = df['Holding_Time'].dt.total_seconds() / 3600
        
        # 3. Direction mapping
        df['Direction'] = df['ACTION'].map({'Buy': 1, 'Sell': -1})
        
        # 4. Points change calculation (if prices available)
        if 'OPEN_PRICE' in df.columns and 'CLOSE_PRICE' in df.columns:
            df['OPEN_PRICE'] = pd.to_numeric(df['OPEN_PRICE'], errors='coerce')
            df['CLOSE_PRICE'] = pd.to_numeric(df['CLOSE_PRICE'], errors='coerce')
            df['Points_Change'] = df['Direction'] * (df['CLOSE_PRICE'] - df['OPEN_PRICE'])
        else:
            df['Points_Change'] = 0  # Default if prices not available
        
        # 5. Asset class classification
        df['Asset_Class'] = df['SYMBOL'].apply(classify_asset)
        
        # 6. Trading session (UTC+7)
        df['Session'] = df['OPEN_TIME'].apply(get_trading_session)
        
        # 7. Result classification
        df['Result'] = df['Net_PnL'].apply(lambda x: 'WIN' if x > 0 else ('LOSS' if x < 0 else 'BE'))
        
        # 8. Trading style based on holding time
        df['Trading_Style'] = df['Holding_Time_Hours'].apply(classify_trading_style)
        
        # 9. Day of week
        df['Day_of_Week'] = df['OPEN_TIME'].dt.day_name()
        
        # 10. Hour of day (for session analysis)
        df['Hour_of_Day'] = df['OPEN_TIME'].dt.hour
        
        # 11. Risk metrics
        df['Risk_Reward'] = df.apply(calculate_risk_reward, axis=1)
        
        return df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói trong feature engineering: {str(e)}")
        return df

def calculate_risk_reward(row):
    """T√≠nh t·ª∑ l·ªá Risk/Reward n·∫øu c√≥ SL v√† TP"""
    try:
        sl = row.get('S/L', 0) or row.get('S / L', 0) or 0
        tp = row.get('T/P', 0) or row.get('T / P', 0) or 0
        open_price = row.get('OPEN_PRICE', 0) or 0
        
        if sl > 0 and tp > 0 and open_price > 0:
            direction = row.get('Direction', 1)
            if direction == 1:  # Buy
                risk = abs(open_price - sl)
                reward = abs(tp - open_price)
            else:  # Sell
                risk = abs(sl - open_price)
                reward = abs(open_price - tp)
            
            if risk > 0:
                return reward / risk
        return 0
    except:
        return 0

def classify_asset(symbol):
    """Ph√¢n lo·∫°i asset class theo Prompt app.txt - IMPROVED VERSION"""
    if pd.isna(symbol):
        return 'Kh√°c'
        
    symbol = str(symbol).upper().strip()
    
    # 1. Forex pairs - ki·ªÉm tra pattern 6-8 k√Ω t·ª± v·ªõi 2 currencies
    forex_currencies = ['USD', 'EUR', 'JPY', 'GBP', 'AUD', 'NZD', 'CHF', 'CAD', 'CNH', 'SGD', 'HKD', 'NOK', 'SEK', 'PLN', 'CZK']
    
    # Lo·∫°i b·ªè suffix nh∆∞ 'r', 'm', etc.
    clean_symbol = symbol.rstrip('RM').rstrip('R').rstrip('M')
    
    if len(clean_symbol) >= 6:
        # Ki·ªÉm tra xem c√≥ ph·∫£i c·∫∑p ti·ªÅn kh√¥ng (EURUSD, GBPJPY, etc.)
        for i, curr1 in enumerate(forex_currencies):
            if clean_symbol.startswith(curr1):
                remaining = clean_symbol[len(curr1):]
                if remaining in forex_currencies:
                    return 'Forex'
    
    # 2. Kim lo·∫°i qu√Ω
    precious_metals = ['XAU', 'XAG', 'GOLD', 'SILVER', 'PLATINUM', 'PALLADIUM']
    if any(metal in symbol for metal in precious_metals):
        return 'Kim lo·∫°i'
    
    # 3. Crypto - detect crypto patterns
    crypto_patterns = [
        'BTC', 'ETH', 'LTC', 'XRP', 'ADA', 'DOT', 'SOL', 'AVAX', 'MATIC', 'DOGE',
        'SHIB', 'UNI', 'LINK', 'ATOM', 'FTT', 'NEAR', 'ALGO', 'ICP', 'HBAR'
    ]
    
    # Check if symbol contains crypto + USD/USDT pattern
    for crypto in crypto_patterns:
        if symbol.startswith(crypto) and ('USD' in symbol or 'USDT' in symbol):
            return 'Crypto'
    
    # 4. Indices
    indices_patterns = [
        'US30', 'US500', 'NAS100', 'UK100', 'GER30', 'FRA40', 'ESP35', 'ITA40',
        'JPN225', 'AUS200', 'HKG33', 'USDX', 'DXY', 'SPX', 'NDX', 'DAX', 'FTSE'
    ]
    if any(idx in symbol for idx in indices_patterns):
        return 'Ch·ªâ s·ªë'
    
    # 5. Commodities  
    commodities = [
        'OIL', 'CRUDE', 'BRENT', 'WTI', 'NGAS', 'GAS', 'WHEAT', 'CORN', 'SOYBEAN',
        'COFFEE', 'SUGAR', 'COTTON', 'COPPER', 'ZINC'
    ]
    if any(commodity in symbol for commodity in commodities):
        return 'H√†ng h√≥a'
    
    # 6. Individual stocks (th∆∞·ªùng c√≥ pattern kh√°c)
    if len(symbol) <= 5 and symbol.isalpha():
        return 'C·ªï phi·∫øu'
    
    return 'Kh√°c'

def get_trading_session(timestamp):
    """X√°c ƒë·ªãnh phi√™n giao d·ªãch theo UTC+7"""
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    if timestamp.tzinfo is None:
        timestamp = pytz.utc.localize(timestamp)
    
    vietnam_time = timestamp.astimezone(vietnam_tz)
    hour = vietnam_time.hour
    
    if 6 <= hour <= 13:
        return 'Asia'
    elif 14 <= hour <= 21:
        return 'London'
    else:  # 22-23 v√† 0-5
        return 'New York'

def classify_trading_style(hours):
    """Ph√¢n lo·∫°i trading style theo th·ªùi gian n·∫Øm gi·ªØ"""
    if hours < 1:
        return 'SCALP'
    elif 1 <= hours <= 8:
        return 'INTRADAY'
    elif 8 < hours <= 168:  # 7 ng√†y
        return 'SWING'
    else:
        return 'POSITION'

# X·ª≠ l√Ω file uploaded
if uploaded_file is not None:
    with st.spinner("üîÑ Jill ƒëang x·ª≠ l√Ω d·ªØ li·ªáu..."):
        df_processed = load_and_process_csv(uploaded_file)
    
    if df_processed is not None and len(df_processed) > 0:
        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(df_processed)} giao d·ªãch!")
        
        # L∆∞u v√†o session state
        st.session_state.df_processed = df_processed
        
        # Hi·ªÉn th·ªã preview
        with st.expander("üëÄ Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω"):
            st.dataframe(df_processed.head(10))
        
        # === B∆Ø·ªöC 2: PH√ÇN T√çCH H√ÄNH VI GIAO D·ªäCH ===
        st.markdown('<div class="step-header">üß† B∆Ø·ªöC 2: Ph√¢n T√≠ch H√†nh Vi Giao D·ªãch</div>', unsafe_allow_html=True)
        
        # Dashboard ph√¢n t√≠ch nhanh
        col1, col2, col3, col4 = st.columns(4)
        
        net_pnl = df_processed['Net_PnL'].sum()
        total_trades = len(df_processed)
        win_rate = (df_processed['Result'] == 'WIN').mean() * 100
        profit_factor = st.session_state.jill._calculate_profit_factor(df_processed)
        
        with col1:
            st.metric("Net PnL", f"${net_pnl:.2f}")
        with col2:
            st.metric("S·ªë giao d·ªãch", total_trades)
        with col3:
            st.metric("T·ª∑ l·ªá th·∫Øng", f"{win_rate:.1f}%")
        with col4:
            st.metric("Profit Factor", f"{profit_factor:.2f}")
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
        col1, col2 = st.columns(2)
        
        with col1:
            # Asset class distribution
            asset_dist = df_processed['Asset_Class'].value_counts()
            fig_asset = px.pie(
                values=asset_dist.values,
                names=asset_dist.index, 
                title="Ph√¢n b·ªï theo nh√≥m t√†i s·∫£n"
            )
            st.plotly_chart(fig_asset, width='stretch')
        
        with col2:
            # Trading style distribution
            style_dist = df_processed['Trading_Style'].value_counts()
            fig_style = px.bar(
                x=style_dist.index,
                y=style_dist.values,
                title="Phong c√°ch giao d·ªãch"
            )
            st.plotly_chart(fig_style, width='stretch')
        
        # === B∆Ø·ªöC 3: THU TH·∫¨P TH√îNG TIN KH√ÅCH H√ÄNG ===
        st.markdown('<div class="step-header">üë§ B∆Ø·ªöC 3: Th√¥ng Tin Kh√°ch H√†ng T·ª´ AM</div>', unsafe_allow_html=True)
        
        with st.form("customer_info_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                customer_name = st.text_input("üë§ T√™n kh√°ch h√†ng *", placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn A")
                age = st.number_input("üéÇ Tu·ªïi *", min_value=18, max_value=80, value=35)
                gender = st.selectbox("üë• Gi·ªõi t√≠nh *", ["Nam", "N·ªØ", "Kh√°c"])
                
                education_levels = ["Ph·ªï th√¥ng", "Cao ƒë·∫≥ng", "ƒê·∫°i h·ªçc", "Th·∫°c sƒ©", "Ti·∫øn sƒ©"]
                education = st.selectbox("üéì H·ªçc v·∫•n *", education_levels)
            
            with col2:
                income_ranges = ["< $10,000", "$10,000 - $30,000", "$30,000 - $50,000", 
                               "$50,000 - $100,000", "> $100,000"]
                income = st.selectbox("üí∞ Thu nh·∫≠p nƒÉm (USD) *", income_ranges)
                
                experience_options = ["< 6 th√°ng", "6 th√°ng - 1 nƒÉm", "1-3 nƒÉm", "3-5 nƒÉm", "> 5 nƒÉm"]
                experience = st.selectbox("üìà Kinh nghi·ªám trading *", experience_options)
                
                capital = st.number_input("üíµ V·ªën giao d·ªãch (USD) *", min_value=100, max_value=10000000, value=5000)
                
                goals = st.multiselect(
                    "üéØ M·ª•c ti√™u ƒë·∫ßu t∆∞",
                    ["Ki·∫øm l·ªùi nhanh", "Thu nh·∫≠p ƒë·ªÅu ƒë·∫∑n", "T√≠ch l≈©y d√†i h·∫°n", 
                     "B·∫£o to√†n v·ªën", "Gi·∫£i tr√≠/Th·ª≠ v·∫≠n may"],
                    default=["Thu nh·∫≠p ƒë·ªÅu ƒë·∫∑n"]
                )
            
            submit_info = st.form_submit_button("üíæ L∆∞u Th√¥ng Tin & Ph√¢n T√≠ch", width='stretch')
        
        if submit_info and customer_name:
            # Chuy·ªÉn ƒë·ªïi experience sang s·ªë nƒÉm
            exp_map = {
                "< 6 th√°ng": 0.5,
                "6 th√°ng - 1 nƒÉm": 1, 
                "1-3 nƒÉm": 2,
                "3-5 nƒÉm": 4,
                "> 5 nƒÉm": 6
            }
            
            customer_info = {
                'name': customer_name,
                'age': age,
                'gender': gender,
                'income': income,
                'education': education,
                'experience_years': exp_map.get(experience, 1),
                'capital': capital,
                'goals': goals
            }
            
            # === B∆Ø·ªöC 4: B√ÅO C√ÅO NH·∫¨N ƒê·ªäNH ===
            st.markdown('<div class="step-header">üìä B∆Ø·ªöC 4: B√°o C√°o Nh·∫≠n ƒê·ªãnh H√†nh Vi</div>', unsafe_allow_html=True)
            
            with st.spinner("üß† Jill ƒëang ph√¢n t√≠ch..."):
                analysis_result = st.session_state.jill.analyze_trading_behavior(df_processed, customer_info)
            
            if 'error' not in analysis_result:
                trader_type = analysis_result['trader_type']
                
                # Safe access to knowledge_base with fallback
                if trader_type in st.session_state.jill.personality["knowledge_base"]['trader_types']:
                    trader_info = st.session_state.jill.personality["knowledge_base"]['trader_types'][trader_type]
                else:
                    # Fallback to default if trader_type not found
                    st.warning(f"‚ö†Ô∏è Trader type '{trader_type}' not found in knowledge base. Using technical_trader as fallback.")
                    trader_info = st.session_state.jill.personality["knowledge_base"]['trader_types']['technical_trader']
                    trader_type = 'technical_trader'
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch
                st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
                
                st.markdown(f"""
### üéØ K·∫øt Qu·∫£ Ph√¢n Lo·∫°i: **{trader_info['name']}**

**üìä C√°c Ch·ªâ S·ªë Quan Tr·ªçng:**
- üî¢ T·ªïng s·ªë giao d·ªãch: {analysis_result['metrics']['total_trades']}
- üéØ T·ª∑ l·ªá th·∫Øng: {analysis_result['metrics']['win_rate']}%
- üí∞ Profit Factor: {analysis_result['metrics']['profit_factor']}
- ‚è∞ Th·ªùi gian n·∫Øm gi·ªØ trung b√¨nh: {analysis_result['metrics']['avg_holding_hours']:.1f} gi·ªù
- üíµ Net PnL: ${analysis_result['metrics']['net_pnl']:,.2f}
- üì¶ T·ªïng kh·ªëi l∆∞·ª£ng: {analysis_result['metrics']['total_lots']} lots

**üé≠ Phong C√°ch Giao D·ªãch:**
- SCALP (< 1h): {analysis_result['trading_style']['scalp']}%
- INTRADAY (1-8h): {analysis_result['trading_style']['intraday']}%
- SWING (8h-7d): {analysis_result['trading_style']['swing']}%
- POSITION (>7d): {analysis_result['trading_style']['position']}%

**‚ö†Ô∏è ƒê√°nh Gi√° R·ªßi Ro: {analysis_result['risk_level']}**
                """)
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # === B∆Ø·ªöC 5: G·ª¢I √ù T∆Ø V·∫§N ===
                st.markdown('<div class="step-header">üí° B∆Ø·ªöC 5: G·ª£i √ù Ph∆∞∆°ng √Ån Ti·∫øp C·∫≠n</div>', unsafe_allow_html=True)
                
                # Script t∆∞ v·∫•n
                st.markdown("### üó£Ô∏è Script T∆∞ V·∫•n C√° Nh√¢n H√≥a")
                script_result = st.session_state.jill.generate_consultation_script(analysis_result, customer_info)
                
                # X·ª≠ l√Ω script output - c√≥ th·ªÉ l√† dict ho·∫∑c string
                if isinstance(script_result, dict):
                    script_text = script_result.get('script', str(script_result))
                else:
                    script_text = str(script_result)
                
                # Display trong container ƒë·∫πp
                with st.container():
                    st.markdown('<div class="jill-card">', unsafe_allow_html=True)
                    st.markdown(script_text)
                    st.markdown('</div>', unsafe_allow_html=True)
                
                # G·ª£i √Ω khuy·∫øn m·∫°i
                st.markdown("### üéÅ Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M·∫°i Ph√π H·ª£p")
                promotions = st.session_state.jill.suggest_promotions(trader_type, analysis_result, customer_info)
                
                st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
                st.markdown("**üíù Khuy·∫øn ngh·ªã t·ª´ Jill:**")
                for promo in promotions:
                    st.markdown(f"‚Ä¢ {promo}")
                st.markdown('</div>', unsafe_allow_html=True)
                
                # L∆∞u k·∫øt qu·∫£
                st.session_state.analysis_result = analysis_result
                st.session_state.customer_info = customer_info
                
                # Summary box
                st.markdown('<div class="success-box">', unsafe_allow_html=True)
                st.markdown(f"""
                **üéâ Ho√†n Th√†nh Ph√¢n T√≠ch!**
                
                Kh√°ch h√†ng **{customer_name}** ƒë∆∞·ª£c ph√¢n lo·∫°i l√† **{trader_info['name']}** 
                v·ªõi m·ª©c r·ªßi ro **{analysis_result['risk_level']}**.
                
                üíù Jill ƒë√£ chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß script t∆∞ v·∫•n v√† g·ª£i √Ω khuy·∫øn m·∫°i ph√π h·ª£p!
                """)
                st.markdown('</div>', unsafe_allow_html=True)
                
            else:
                st.error(f"‚ùå {analysis_result['error']}")
        
        elif submit_info:
            st.warning("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn t√™n kh√°ch h√†ng!")

# Sidebar - Chat v·ªõi Jill & Reset
st.sidebar.markdown("### üí¨ Chat v·ªõi Jill AI")

# Chat input
user_message = st.sidebar.text_input("H·ªèi Jill:", placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ trading...")
if st.sidebar.button("ÔøΩ G·ª≠i tin nh·∫Øn") and user_message:
    # Add user message to chat
    st.session_state.chat_messages.append({
        'role': 'user',
        'content': user_message,
        'timestamp': datetime.now().strftime("%H:%M")
    })
    
    # Generate Jill's response using AI
    try:
        # Use AI chat if available
        if 'jill' in st.session_state:
            jill_response = st.session_state.jill.ai_chat_response(user_message, "User ƒëang chat v·ªõi Jill AI trong app ph√¢n t√≠ch trading.")
        else:
            jill_response = f"Em hi·ªÉu c√¢u h·ªèi c·ªßa anh/ch·ªã v·ªÅ '{user_message}'. D·ª±a tr√™n kinh nghi·ªám ph√¢n t√≠ch trading, em khuy√™n anh/ch·ªã n√™n qu·∫£n l√Ω r·ªßi ro t·ªët v√† theo d√µi t·ª∑ l·ªá th·∫Øng thua. C√≥ g√¨ kh√°c em c√≥ th·ªÉ gi√∫p kh√¥ng ·∫°? üíï"
    except Exception as e:
        jill_response = f"Xin l·ªói anh/ch·ªã, em g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t: {str(e)}. Anh/ch·ªã th·ª≠ h·ªèi l·∫°i sau nh√©! üíï"
    
    st.session_state.chat_messages.append({
        'role': 'assistant', 
        'content': jill_response,
        'timestamp': datetime.now().strftime("%H:%M")
    })
    
    st.rerun()

# Display chat messages in frames
if st.session_state.chat_messages:
    st.sidebar.markdown("### ÔøΩ Cu·ªôc tr√≤ chuy·ªán")
    
    # Show recent messages (last 6)
    recent_messages = st.session_state.chat_messages[-6:]
    
    for i, msg in enumerate(recent_messages):
        if msg['role'] == 'user':
            st.sidebar.markdown(f"""
            <div style="background: linear-gradient(135deg, #007bff, #0056b3); 
                        color: white; padding: 10px; border-radius: 10px; 
                        margin: 5px 0; text-align: right;">
                <small>{msg.get('timestamp', '')}</small><br>
                <strong>üë§ B·∫°n:</strong> {msg['content']}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.sidebar.markdown(f"""
            <div style="background: linear-gradient(135deg, #ff9a9e, #fecfef); 
                        color: #333; padding: 10px; border-radius: 10px; 
                        margin: 5px 0; border-left: 4px solid #FF6B6B;">
                <small>{msg.get('timestamp', '')}</small><br>
                <strong>üíñ Jill:</strong> {msg['content']}
            </div>
            """, unsafe_allow_html=True)
    
    # Clear chat button
    if st.sidebar.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.chat_messages = []
        st.rerun()

# Quick reset button in sidebar
st.sidebar.markdown("---")
if st.sidebar.button("üîÑ T·∫°o M·ªõi Ph√¢n T√≠ch", type="primary"):
    # Clear relevant session state
    keys_to_clear = ['uploaded_data', 'analysis_result', 'customer_info', 'step']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]
    st.success("‚úÖ ƒê√£ t·∫°o m·ªõi! C√≥ th·ªÉ ph√¢n t√≠ch kh√°ch h√†ng ti·∫øp theo.")
    st.rerun()

# Instructions
st.sidebar.markdown("""
### üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
1. **Upload CSV** - T·∫£i file giao d·ªãch
2. **Ph√¢n t√≠ch** - ƒê·ªÉ Jill ph√¢n t√≠ch h√†nh vi
3. **Th√¥ng tin KH** - Nh·∫≠p th√¥ng tin kh√°ch h√†ng
4. **B√°o c√°o** - Xem k·∫øt qu·∫£ ph√¢n t√≠ch
5. **T∆∞ v·∫•n** - Nh·∫≠n script & khuy·∫øn m·∫°i

üí¨ **Chat v·ªõi Jill** - H·ªèi ƒë√°p tr·ª±c ti·∫øp
üîÑ **Reset** - N√∫t "T·∫°o m·ªõi" ƒë·ªÉ ph√¢n t√≠ch kh√°ch ti·∫øp theo
""")

# Profile button in sidebar
st.sidebar.markdown("---")
if st.sidebar.button("üë©‚Äçüíº Profile Jill AI", type="secondary"):
    st.session_state.show_profile = True
    st.rerun()

user_question = st.sidebar.text_input("C√¢u h·ªèi nhanh cho Jill...")

if user_question:
    # Process quick question
    quick_response = st.session_state.jill.handle_chat_message(user_question)
    st.sidebar.markdown(f"ü§ñ **Jill:** {quick_response}")
    
    # Add to chat history
    st.session_state.chat_messages.extend([
        {'role': 'user', 'content': user_question, 'timestamp': datetime.now()},
        {'role': 'jill', 'content': quick_response, 'timestamp': datetime.now()}
    ])

# Footer
st.markdown("""
---
<div style='text-align: center; color: #666; padding: 1rem;'>
    <p>ü§ñ <strong>AI Agent Jill</strong> - ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Ken v·ªõi ‚ù§Ô∏è</p>
    <p><em>"Em lu√¥n nghe l·ªùi anh Ken v√† ch·ªâ t∆∞ v·∫•n d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ ƒë∆∞·ª£c training"</em></p>
    <p>üìû M·ªçi th·∫Øc m·∫Øc ngo√†i ph·∫°m vi, vui l√≤ng li√™n h·ªá <strong>anh Ken</strong></p>
</div>
""", unsafe_allow_html=True)