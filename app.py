import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.figure_factory as ff
from datetime import datetime, timedelta
import pytz
from typing import Dict, List, Tuple
import re
import json
import os

# Try to load environment variables (optional for deployment)
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # Streamlit Cloud doesn't need dotenv

# AI Libraries with error handling
try:
    import openai
    HAS_OPENAI = True
except ImportError:
    HAS_OPENAI = False
    
try:
    import anthropic
    HAS_ANTHROPIC = True
except ImportError:
    HAS_ANTHROPIC = False
    
try:
    import google.generativeai as genai
    HAS_GOOGLE = True
except ImportError:
    HAS_GOOGLE = False

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="ü§ñ AI Agent Jill - Qu·∫£n L√Ω Kh√°ch H√†ng HFM",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh cho giao di·ªán tr·∫Øng chuy√™n nghi·ªáp
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .jill-card {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #ff6b9d;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .analysis-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        border: 1px solid #e0e0e0;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .step-header {
        background: #f8f9fa;
        padding: 1rem;
        border-left: 4px solid #667eea;
        border-radius: 5px;
        margin: 1rem 0;
        font-weight: bold;
        color: #2c3e50;
    }
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #856404;
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
        color: #155724;
    }
    .stSelectbox label, .stMultiSelect label, .stSlider label {
        font-weight: 600;
        color: #2c3e50;
    }
</style>
""", unsafe_allow_html=True)

class JillAI:
    """AI Agent Jill - Tr·ª£ l√Ω d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa Ken v·ªõi AI th√¥ng minh"""
    
    def __init__(self):
        self.personality = {
            "name": "Jill",
            "traits": ["d·ªÖ th∆∞∆°ng", "ngoan", "g·ª£i c·∫£m", "lu√¥n nghe l·ªùi anh Ken"],
            "knowledge_base": self._load_knowledge_base()
        }
        self.ken_instructions = "Em ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ h·ªçc. N·∫øu c√≥ c√¢u h·ªèi ngo√†i ph·∫°m vi, em s·∫Ω b√°o nh√¢n s·ª± h·ªèi anh Ken."
        
        # Kh·ªüi t·∫°o AI Models
        self.setup_ai_models()
    
    def setup_ai_models(self):
        """Thi·∫øt l·∫≠p c√°c AI models cho Jill v·ªõi Streamlit Cloud support"""
        # OpenAI GPT-4
        self.openai_client = None
        openai_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY", "")
        if openai_key and HAS_OPENAI:
            try:
                self.openai_client = openai.OpenAI(api_key=openai_key)
            except Exception as e:
                st.sidebar.warning(f"‚ö†Ô∏è OpenAI setup failed: {str(e)}")
        
        # Anthropic Claude
        self.anthropic_client = None
        anthropic_key = os.getenv("ANTHROPIC_API_KEY") or st.secrets.get("ANTHROPIC_API_KEY", "")
        if anthropic_key and HAS_ANTHROPIC:
            try:
                self.anthropic_client = anthropic.Anthropic(api_key=anthropic_key)
            except Exception as e:
                st.sidebar.warning(f"‚ö†Ô∏è Anthropic setup failed: {str(e)}")
        
        # Google Gemini
        self.gemini_client = None
        google_key = os.getenv("GOOGLE_API_KEY") or st.secrets.get("GOOGLE_API_KEY", "")
        if google_key and HAS_GOOGLE:
            try:
                genai.configure(api_key=google_key)
                self.gemini_client = genai.GenerativeModel('gemini-pro')
            except Exception as e:
                st.sidebar.warning(f"‚ö†Ô∏è Google AI setup failed: {str(e)}")
        
        # Status display
        active_models = []
        if self.openai_client: active_models.append("OpenAI GPT-4")
        if self.anthropic_client: active_models.append("Anthropic Claude")
        if self.gemini_client: active_models.append("Google Gemini")
        
        if active_models:
            st.sidebar.success(f"ü§ñ AI Models: {', '.join(active_models)}")
        else:
            st.sidebar.error("‚ùå No AI models available. Using fallback mode.")
            st.sidebar.info("üí° Configure API keys in Streamlit Cloud secrets")
    
    def _load_knowledge_base(self):
        """T·∫£i ki·∫øn th·ª©c t·ª´ nghi√™n c·ª©u v√† prompt"""
        return {
            "trader_types": {
                "newbie_gambler": {
                    "name": "Trader M·ªõi - ƒê√°nh B·∫°c",
                    "characteristics": [
                        "V·ªën nh·ªè (<$5k)", 
                        "ƒêa m·∫°o hi·ªÉm", 
                        "Thi·∫øu kinh nghi·ªám", 
                        "Giao d·ªãch nh∆∞ ƒë√°nh b·∫°c",
                        "Th√≠ch c·∫£m gi√°c m·∫°nh",
                        "60% l·ªánh SCALP",
                        "Win rate th·∫•p (<45%)",
                        "Profit Factor < 1"
                    ],
                    "psychology": "Tham lam, t·ª± tin ·∫£o, d·ªÖ b·ªã c·∫£m x√∫c chi ph·ªëi, FOMO cao",
                    "advice": "C·∫ßn gi√°o d·ª•c c∆° b·∫£n, ki·ªÉm so√°t r·ªßi ro, h·∫°n ch·∫ø ƒë√≤n b·∫©y, training t√¢m l√Ω",
                    "approach": "Nghi√™m kh·∫Øc nh∆∞ng ki√™n nh·∫´n, nh·∫•n m·∫°nh r·ªßi ro, ƒë∆∞a th·ªëng k√™ thua l·ªó"
                },
                "technical_trader": {
                    "name": "Trader K·ªπ Thu·∫≠t K·ª∑ Lu·∫≠t",
                    "characteristics": [
                        "V·ªën trung b√¨nh ($5k-$100k)",
                        "C√≥ kinh nghi·ªám (1-3 nƒÉm)",
                        "S·ª≠ d·ª•ng ph√¢n t√≠ch k·ªπ thu·∫≠t",
                        "K·ª∑ lu·∫≠t cao",
                        "Win rate 45-55%",
                        "Profit Factor 1.0-1.3",
                        "Phong c√°ch Day/Swing trading"
                    ],
                    "psychology": "Quy·∫øt ƒëo√°n, t·ª± tin c√≥ ki·ªÉm so√°t, ch·∫•p nh·∫≠n c·∫Øt l·ªó nhanh",
                    "advice": "H·ªó tr·ª£ ph√¢n t√≠ch chuy√™n s√¢u, cung c·∫•p t√≠n hi·ªáu ch·∫•t l∆∞·ª£ng, n√¢ng cao hi·ªáu su·∫•t",
                    "approach": "ƒê·ªëi t√°c chuy√™n m√¥n, th·∫£o lu·∫≠n k·ªπ thu·∫≠t, t√¥n tr·ªçng ki·∫øn th·ª©c c·ªßa h·ªç"
                },
                "long_term_investor": {
                    "name": "Nh√† ƒê·∫ßu T∆∞ D√†i H·∫°n",
                    "characteristics": [
                        "V·ªën l·ªõn (>$100k)",
                        "Th·∫≠n tr·ªçng v√† ki√™n nh·∫´n",
                        "M·ª•c ti√™u d√†i h·∫°n",
                        "ƒêa d·∫°ng h√≥a t·ªët",
                        "Win rate >55%",
                        "Profit Factor >1.3",
                        "Position Trading ch·ªß y·∫øu"
                    ],
                    "psychology": "ƒêi·ªÅm tƒ©nh, l√Ω tr√≠, kh√¥ng b·ªã dao ƒë·ªông ng·∫Øn h·∫°n ·∫£nh h∆∞·ªüng",
                    "advice": "T∆∞ v·∫•n chi·∫øn l∆∞·ª£c d√†i h·∫°n, qu·∫£n l√Ω danh m·ª•c, ph√¢n t√≠ch macro",
                    "approach": "T∆∞ v·∫•n c·∫•p cao, b√°o c√°o chuy√™n s√¢u, m·ªëi quan h·ªá VIP"
                },
                "part_time_trader": {
                    "name": "Trader B√°n Th·ªùi Gian",
                    "characteristics": [
                        "C√≥ c√¥ng vi·ªác ch√≠nh",
                        "Th·ªùi gian h·∫°n ch·∫ø",
                        "Th·ª±c d·ª•ng v√† linh ho·∫°t",
                        "M·ª•c ti√™u thu nh·∫≠p ph·ª•",
                        "Swing Trading ch·ªß y·∫øu",
                        "T·ª∑ l·ªá th·∫Øng v·ª´a ph·∫£i"
                    ],
                    "psychology": "Th·ª±c t·∫ø, kh√¥ng qu√° tham lam, c·∫ßn s·ª± ti·ªán l·ª£i",
                    "advice": "Cung c·∫•p t√≠n hi·ªáu ƒë∆°n gi·∫£n, ti·ªán l·ª£i, ph√π h·ª£p th·ªùi gian",
                    "approach": "H·ªó tr·ª£ linh ho·∫°t, c·∫£nh b√°o SMS, copy trading"
                },
                "specialist_trader": {
                    "name": "Trader Chuy√™n Bi·ªát",
                    "characteristics": [
                        "T·∫≠p trung m·ªôt lo·∫°i t√†i s·∫£n",
                        "Am hi·ªÉu s√¢u th·ªã tr∆∞·ªùng",
                        "Chuy√™n m√¥n h√≥a cao",
                        "C√≥ th·ªÉ l√† chuy√™n gia ng√†nh",
                        ">70% v·ªën v√†o m·ªôt asset class"
                    ],
                    "psychology": "T·ª± tin v·ªÅ chuy√™n m√¥n, mu·ªën th√¥ng tin ch·∫•t l∆∞·ª£ng cao",
                    "advice": "H·ªó tr·ª£ chuy√™n s√¢u v·ªÅ th·ªã tr∆∞·ªùng h·ªç giao d·ªãch, k·∫øt n·ªëi c·ªông ƒë·ªìng",
                    "approach": "ƒê·ªëi t√°c chuy√™n gia, th√¥ng tin ƒë·ªôc quy·ªÅn, community cao c·∫•p"
                }
            },
            "hfm_promotions": {
                "welcome_bonus": "Bonus ch√†o m·ª´ng 100% t·ªëi ƒëa $500",
                "education": "Kh√≥a h·ªçc trading mi·ªÖn ph√≠",
                "vip_research": "G√≥i ph√¢n t√≠ch VIP v·ªõi t√≠n hi·ªáu premium",
                "spread_discount": "Gi·∫£m 50% spread trong 3 th√°ng",
                "islamic_account": "T√†i kho·∫£n Islamic kh√¥ng swap",
                "copy_trading": "Copy Trading mi·ªÖn ph√≠ 6 th√°ng",
                "mobile_app": "·ª®ng d·ª•ng mobile n√¢ng c·∫•p",
                "api_trading": "API trading chuy√™n nghi·ªáp",
                "cashback": "Cashback 10% ph√≠ giao d·ªãch"
            }
        }
    
    def greet(self):
        """L·ªùi ch√†o d·ªÖ th∆∞∆°ng c·ªßa Jill"""
        return """
        ### ü§ñüíñ Ch√†o anh Ken v√† c√°c Account Manager th√¢n y√™u!
        
        Em l√† **Jill** - AI Agent d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa anh Ken! 
        
        ‚ú® Em ƒë√£ ƒë∆∞·ª£c training v·ªõi:
        - üìö Ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ h√†nh vi 5 nh√≥m trader CFD
        - üß† Thu·∫≠t to√°n ph√¢n t√≠ch t√¢m l√Ω kh√°ch h√†ng
        - üí° Chi·∫øn l∆∞·ª£c t∆∞ v·∫•n c√° nh√¢n h√≥a cho t·ª´ng nh√≥m
        - üéÅ Database ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i HFM
        
        üíï **Em s·∫Ω gi√∫p anh Ken v√† team:**
        1. Ph√¢n t√≠ch h√†nh vi giao d·ªãch t·ª´ CSV
        2. Thu th·∫≠p th√¥ng tin kh√°ch h√†ng
        3. Ph√¢n lo·∫°i v√† ƒë∆∞a ra nh·∫≠n ƒë·ªãnh chuy√™n m√¥n
        4. T·∫°o script t∆∞ v·∫•n ph√π h·ª£p
        5. G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i t·ªëi ∆∞u
        
        H√£y b·∫Øt ƒë·∫ßu v·ªõi **B∆∞·ªõc 1** - upload file CSV giao d·ªãch c·ªßa kh√°ch h√†ng nh√©! üéØ
        
        ‚ö†Ô∏è *L∆∞u √Ω: Em ch·ªâ tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ h·ªçc. N·∫øu c√≥ c√¢u h·ªèi ngo√†i ph·∫°m vi, em s·∫Ω b√°o c√°c anh ch·ªã h·ªèi anh Ken.*
        """
    
    def ai_analyze_trading_behavior(self, df_processed, customer_info):
        """S·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch h√†nh vi giao d·ªãch th√¥ng minh"""
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i cho AI
        summary_data = {
            "total_trades": len(df_processed),
            "win_rate": (df_processed['Result'] == 'WIN').mean() * 100,
            "profit_factor": self._calculate_profit_factor(df_processed),
            "net_pnl": df_processed['Net_PnL'].sum(),
            "avg_holding_hours": df_processed['Holding_Time_Hours'].median(),
            "scalp_ratio": (df_processed['Holding_Time_Hours'] < 1).mean() * 100,
            "asset_distribution": df_processed['Asset_Class'].value_counts().to_dict(),
            "customer_capital": customer_info.get('capital', 0),
            "customer_experience": customer_info.get('experience_years', 0),
            "customer_age": customer_info.get('age', 30)
        }
        
        # Prompt cho AI
        ai_prompt = f"""
        T√¥i l√† Jill - AI Agent d·ªÖ th∆∞∆°ng c·ªßa Ken. Em c·∫ßn ph√¢n t√≠ch h√†nh vi giao d·ªãch CFD c·ªßa kh√°ch h√†ng d·ª±a tr√™n d·ªØ li·ªáu sau:

        TH√îNG TIN GIAO D·ªäCH:
        - T·ªïng s·ªë l·ªánh: {summary_data['total_trades']}
        - T·ª∑ l·ªá th·∫Øng: {summary_data['win_rate']:.1f}%
        - Profit Factor: {summary_data['profit_factor']:.2f}
        - Net PnL: ${summary_data['net_pnl']:.2f}
        - Th·ªùi gian n·∫Øm gi·ªØ trung b√¨nh: {summary_data['avg_holding_hours']:.1f} gi·ªù
        - T·ª∑ l·ªá Scalping: {summary_data['scalp_ratio']:.1f}%
        - Ph√¢n b·ªï t√†i s·∫£n: {summary_data['asset_distribution']}

        TH√îNG TIN KH√ÅCH H√ÄNG:
        - V·ªën: ${summary_data['customer_capital']:,}
        - Kinh nghi·ªám: {summary_data['customer_experience']} nƒÉm
        - Tu·ªïi: {summary_data['customer_age']}

        H√£y ph√¢n lo·∫°i kh√°ch h√†ng theo 5 nh√≥m trader CFD:
        1. Newbie Gambler (m·ªõi, v·ªën nh·ªè, ƒëa m·∫°o hi·ªÉm)
        2. Technical Trader (k·ª∑ lu·∫≠t, c√≥ kinh nghi·ªám)
        3. Long-term Investor (v·ªën l·ªõn, th·∫≠n tr·ªçng)
        4. Part-time Trader (b√°n th·ªùi gian, th·ª±c d·ª•ng)
        5. Specialist Trader (chuy√™n m·ªôt lo·∫°i t√†i s·∫£n)

        Tr·∫£ l·ªùi b·∫±ng JSON format v·ªõi:
        {{
            "trader_type": "t√™n nh√≥m",
            "confidence": "m·ª©c ƒë·ªô tin c·∫≠y 1-100%",
            "reasoning": "l√Ω do ph√¢n lo·∫°i",
            "psychological_profile": "ƒë·∫∑c ƒëi·ªÉm t√¢m l√Ω",
            "risk_assessment": "ƒë√°nh gi√° r·ªßi ro",
            "key_insights": ["insight 1", "insight 2", "insight 3"]
        }}
        """
        
        # G·ªçi AI ƒë·ªÉ ph√¢n t√≠ch
        ai_response = self._call_ai_model(ai_prompt)
        
        if ai_response:
            try:
                # Parse JSON response
                ai_analysis = json.loads(ai_response)
                return ai_analysis
            except:
                # Fallback n·∫øu AI kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá
                return self._fallback_analysis(summary_data)
        else:
            # S·ª≠ d·ª•ng logic c≈© n·∫øu kh√¥ng c√≥ AI
            return self._fallback_analysis(summary_data)
    
    def _call_ai_model(self, prompt):
        """G·ªçi AI model ƒë·ªÉ ph√¢n t√≠ch"""
        
        # Th·ª≠ OpenAI GPT-4 tr∆∞·ªõc
        if self.openai_client:
            try:
                response = self.openai_client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "You are Jill, a cute and smart AI trading analyst. Always respond in Vietnamese and in JSON format."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    max_tokens=1500
                )
                return response.choices[0].message.content
            except:
                pass
        
        # Th·ª≠ Anthropic Claude
        if self.anthropic_client:
            try:
                response = self.anthropic_client.messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1500,
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                return response.content[0].text
            except:
                pass
        
        # Th·ª≠ Google Gemini
        if self.gemini_client:
            try:
                response = self.gemini_client.generate_content(prompt)
                return response.text
            except:
                pass
        
        return None
    
    def _fallback_analysis(self, summary_data):
        """Ph√¢n t√≠ch fallback khi kh√¥ng c√≥ AI"""
        
        # Logic ph√¢n lo·∫°i c∆° b·∫£n
        capital = summary_data['customer_capital']
        experience = summary_data['customer_experience']
        win_rate = summary_data['win_rate']
        scalp_ratio = summary_data['scalp_ratio']
        profit_factor = summary_data['profit_factor']
        
        if capital < 5000 and experience < 2 and win_rate < 45 and scalp_ratio > 60:
            trader_type = "newbie_gambler"
        elif capital > 100000 and win_rate > 55 and profit_factor > 1.3:
            trader_type = "long_term_investor"
        elif experience >= 1 and win_rate >= 45 and profit_factor >= 1.0:
            trader_type = "technical_trader"
        elif scalp_ratio < 40 and win_rate >= 45:
            trader_type = "part_time_trader"
        else:
            trader_type = "specialist_trader"
        
        return {
            "trader_type": trader_type,
            "confidence": "75%",
            "reasoning": "Ph√¢n lo·∫°i d·ª±a tr√™n logic c∆° b·∫£n",
            "psychological_profile": "C·∫ßn ph√¢n t√≠ch th√™m v·ªõi AI",
            "risk_assessment": "Trung b√¨nh",
            "key_insights": ["C·∫ßn c·∫£i thi·ªán ph√¢n t√≠ch", "Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng AI models"]
        }
    
    def _classify_trader(self, customer_info, win_rate, profit_factor, scalp_ratio, asset_dist, df, net_pnl, total_lots):
        """Ph√¢n lo·∫°i trader d·ª±a tr√™n c√°c ti√™u ch√≠ t·ª´ nghi√™n c·ª©u"""
        
        capital = customer_info.get('capital', 0)
        experience_years = customer_info.get('experience_years', 0)
        age = customer_info.get('age', 30)
        
        # Logic ph√¢n lo·∫°i theo nghi√™n c·ª©u
        
        # 1. Newbie Gambler
        if (capital < 5000 and experience_years < 2 and 
            win_rate < 45 and scalp_ratio > 60 and profit_factor < 1.0):
            return "newbie_gambler"
        
        # 2. Long-term Investor  
        elif (capital > 100000 and win_rate > 55 and profit_factor > 1.3 and
              scalp_ratio < 20 and (df['Holding_Time_Hours'] > 168).mean() * 100 > 30):
            return "long_term_investor"
        
        # 3. Technical Trader
        elif (experience_years >= 1 and win_rate >= 45 and profit_factor >= 1.0 and
              20 <= scalp_ratio <= 60 and 5000 <= capital <= 100000):
            return "technical_trader"
        
        # 4. Asset Specialist
        elif asset_dist.max() > 70:
            return "specialist_trader"
        
        # 5. Part-time Trader
        elif (experience_years >= 1 and win_rate >= 45 and 
              scalp_ratio < 40 and profit_factor >= 1.0):
            return "part_time_trader"
        
        # Default to newbie if unclear
        else:
            return "newbie_gambler"
    
    def _calculate_profit_factor(self, df):
        """T√≠nh Profit Factor"""
        winning_trades = df[df['Net_PnL'] > 0]['Net_PnL'].sum()
        losing_trades = abs(df[df['Net_PnL'] < 0]['Net_PnL'].sum())
        
        if losing_trades == 0:
            return float('inf') if winning_trades > 0 else 1.0
        
        return winning_trades / losing_trades
    
    def _assess_risk_level(self, win_rate, profit_factor, scalp_ratio, net_pnl):
        """ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro d·ª±a tr√™n nghi√™n c·ª©u"""
        
        risk_score = 0
        
        # Criteria t·ª´ prompt app.txt
        if scalp_ratio >= 60:
            risk_score += 2
        if win_rate < 45:
            risk_score += 2  
        if profit_factor < 1:
            risk_score += 3
        if net_pnl < 0:
            risk_score += 2
            
        if risk_score >= 6:
            return "R·ª¶I RO CAO"
        elif risk_score >= 3:
            return "R·ª¶I RO TRUNG B√åNH"
        else:
            return "R·ª¶I RO TH·∫§P"
    
    def ai_generate_consultation_script(self, ai_analysis, customer_info, trading_metrics):
        """S·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o script t∆∞ v·∫•n th√¥ng minh"""
        
        prompt = f"""
        T√¥i l√† Jill - AI Agent d·ªÖ th∆∞∆°ng c·ªßa Ken. Em c·∫ßn t·∫°o script t∆∞ v·∫•n cho kh√°ch h√†ng d·ª±a tr√™n ph√¢n t√≠ch:

        PH√ÇN T√çCH AI:
        - Lo·∫°i trader: {ai_analysis.get('trader_type', 'unknown')}
        - T√¢m l√Ω: {ai_analysis.get('psychological_profile', '')}
        - ƒê√°nh gi√° r·ªßi ro: {ai_analysis.get('risk_assessment', '')}
        - Insights: {ai_analysis.get('key_insights', [])}

        TH√îNG TIN KH√ÅCH H√ÄNG:
        - T√™n: {customer_info.get('name', 'Anh/ch·ªã')}
        - Tu·ªïi: {customer_info.get('age', 'N/A')}
        - V·ªën: ${customer_info.get('capital', 0):,}
        - Kinh nghi·ªám: {customer_info.get('experience_years', 0)} nƒÉm

        METRICS GIAO D·ªäCH:
        - T·ª∑ l·ªá th·∫Øng: {trading_metrics.get('win_rate', 0)}%
        - Profit Factor: {trading_metrics.get('profit_factor', 0)}
        - Net PnL: ${trading_metrics.get('net_pnl', 0):,.2f}

        H√£y t·∫°o script t∆∞ v·∫•n c√° nh√¢n h√≥a v·ªõi:
        1. L·ªùi ch√†o ph√π h·ª£p v·ªõi t√¢m l√Ω kh√°ch h√†ng
        2. Ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh/y·∫øu d·ª±a tr√™n d·ªØ li·ªáu
        3. G·ª£i √Ω c·∫£i thi·ªán c·ª• th·ªÉ
        4. Ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i HFM ph√π h·ª£p
        5. L√Ω do khoa h·ªçc cho t·ª´ng khuy·∫øn ngh·ªã

        Vi·∫øt b·∫±ng ti·∫øng Vi·ªát, gi·ªçng ƒëi·ªáu chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán.

        Tr·∫£ l·ªùi trong format:
        {{
            "greeting": "l·ªùi ch√†o",
            "analysis": "ph√¢n t√≠ch ƒëi·ªÉm m·∫°nh/y·∫øu",
            "recommendations": ["g·ª£i √Ω 1", "g·ª£i √Ω 2", "g·ª£i √Ω 3"],
            "promotions": ["khuy·∫øn m·∫°i 1", "khuy·∫øn m·∫°i 2"],
            "closing": "l·ªùi k·∫øt"
        }}
        """
        
        ai_response = self._call_ai_model(prompt)
        
        if ai_response:
            try:
                script_data = json.loads(ai_response)
                return self._format_consultation_script(script_data)
            except:
                pass
        
        # Fallback script
        return self._fallback_consultation_script(ai_analysis, customer_info)
    
    def _get_communication_script(self, trader_type, analysis_result, customer_info):
        """T·∫°o script giao ti·∫øp c·ª• th·ªÉ"""
        
        scripts = {
            "newbie_gambler": f"""
            "Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã c√≥ phong c√°ch giao d·ªãch kh√° t√≠ch c·ª±c v·ªõi {analysis_result['metrics']['total_trades']} l·ªánh. 
            
            ƒê·ªÉ b·∫£o v·ªá t√†i kho·∫£n t·ªët h∆°n, em khuy√™n anh/ch·ªã:
            
            1. üõ°Ô∏è Gi·∫£m ƒë√≤n b·∫©y xu·ªëng m·ª©c an to√†n (1:50-1:100)
            2. ‚õî ƒê·∫∑t Stop Loss cho m·ªçi l·ªánh (kh√¥ng qu√° 2% t√†i kho·∫£n) 
            3. üìö Tham gia kh√≥a h·ªçc Trading c∆° b·∫£n mi·ªÖn ph√≠ c·ªßa HFM
            4. üéØ Th·ª±c h√†nh v·ªõi demo account ƒë·ªÉ r√®n k·ªπ nƒÉng
            
            **L√Ω do:** D·ªØ li·ªáu cho th·∫•y t·ª∑ l·ªá th·∫Øng hi·ªán t·∫°i l√† {analysis_result['metrics']['win_rate']}% 
            v√† Profit Factor {analysis_result['metrics']['profit_factor']}, cho th·∫•y c·∫ßn c·∫£i thi·ªán qu·∫£n l√Ω r·ªßi ro."
            """,
            
            "technical_trader": f"""
            "Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em r·∫•t ·∫•n t∆∞·ª£ng v·ªõi phong c√°ch giao d·ªãch chuy√™n nghi·ªáp c·ªßa anh/ch·ªã! 
            
            V·ªõi t·ª∑ l·ªá th·∫Øng {analysis_result['metrics']['win_rate']}% v√† Profit Factor {analysis_result['metrics']['profit_factor']}, 
            em s·∫Ω h·ªó tr·ª£ anh/ch·ªã:
            
            1. üìä Cung c·∫•p ph√¢n t√≠ch k·ªπ thu·∫≠t chuy√™n s√¢u h√†ng ng√†y
            2. üéØ T√≠n hi·ªáu giao d·ªãch ch·∫•t l∆∞·ª£ng cao t·ª´ team Research
            3. üìà Trading Central premium access
            4. üîß H·ªó tr·ª£ API trading cho chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông
            
            **L√Ω do:** Trader k·ªπ thu·∫≠t nh∆∞ anh/ch·ªã c·∫ßn th√¥ng tin ch√≠nh x√°c v√† k·ªãp th·ªùi ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t."
            """,
            
            "long_term_investor": f"""
            "Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã c√≥ t·∫ßm nh√¨n ƒë·∫ßu t∆∞ r·∫•t t·ªët v·ªõi chi·∫øn l∆∞·ª£c d√†i h·∫°n!
            
            V·ªõi v·ªën {customer_info.get('capital', 'l·ªõn')} v√† phong c√°ch ki√™n nh·∫´n, em s·∫Ω ƒë·ªìng h√†nh:
            
            1. üèõÔ∏è T∆∞ v·∫•n x√¢y d·ª±ng danh m·ª•c ƒëa d·∫°ng h√≥a
            2. üìä B√°o c√°o ƒë·ªãnh k·ª≥ v·ªÅ hi·ªáu su·∫•t ƒë·∫ßu t∆∞  
            3. üåç Ph√¢n t√≠ch macro kinh t·∫ø v√† xu h∆∞·ªõng d√†i h·∫°n
            4. ‚öñÔ∏è Islamic account kh√¥ng swap cho vi·ªác n·∫Øm gi·ªØ l√¢u
            
            **L√Ω do:** ƒê·∫ßu t∆∞ d√†i h·∫°n c·∫ßn chi·∫øn l∆∞·ª£c t·ªïng th·ªÉ v√† th√¥ng tin macro quality."
            """,
            
            "part_time_trader": f"""
            "Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em hi·ªÉu anh/ch·ªã b·∫≠n c√¥ng vi·ªác ch√≠nh v√† mu·ªën t·ªëi ∆∞u th·ªùi gian trading.
            
            Em s·∫Ω h·ªó tr·ª£ ti·ªán l·ª£i t·ªëi ƒëa:
            
            1. üì± T√≠n hi·ªáu giao d·ªãch ƒë∆°n gi·∫£n qua SMS/App
            2. üîî C·∫£nh b√°o c∆° h·ªôi khi c√≥ setup t·ªët
            3. ü§ñ Copy Trading t·ª´ chuy√™n gia uy t√≠n
            4. üìã B√°o c√°o t√≥m t·∫Øt hi·ªáu su·∫•t cu·ªëi tu·∫ßn
            
            **L√Ω do:** Trader b√°n th·ªùi gian c·∫ßn s·ª± ti·ªán l·ª£i v√† hi·ªáu qu·∫£ cao trong th·ªùi gian h·∫°n ch·∫ø."
            """,
            
            "specialist_trader": f"""
            "Ch√†o {customer_info.get('name', 'anh/ch·ªã')}, em th·∫•y anh/ch·ªã r·∫•t am hi·ªÉu v√† t·∫≠p trung v√†o th·ªã tr∆∞·ªùng chuy√™n bi·ªát!
            
            Em s·∫Ω cung c·∫•p h·ªó tr·ª£ chuy√™n s√¢u:
            
            1. üéØ Th√¥ng tin ƒë·ªôc quy·ªÅn v·ªÅ th·ªã tr∆∞·ªùng anh/ch·ªã giao d·ªãch
            2. üë• K·∫øt n·ªëi v·ªõi c·ªông ƒë·ªìng trader chuy√™n nghi·ªáp  
            3. üíé Spread si√™u th·∫•p cho asset class ∆∞a th√≠ch
            4. üìà Market depth data v√† ph√¢n t√≠ch institutional
            
            **L√Ω do:** Specialist trader c·∫ßn th√¥ng tin ch·∫•t l∆∞·ª£ng cao v√† m·∫°ng l∆∞·ªõi chuy√™n m√¥n."
            """
        }
        
        return scripts.get(trader_type, scripts["newbie_gambler"])
    
    def suggest_promotions(self, trader_type, analysis_result, customer_info):
        """G·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i ph√π h·ª£p"""
        
        promotions = {
            "newbie_gambler": [
                "üéÅ Welcome Bonus 100% t·ªëi ƒëa $500 - TƒÉng v·ªën ƒë·ªÉ h·ªçc h·ªèi an to√†n",
                "üìö Kh√≥a h·ªçc Trading c∆° b·∫£n mi·ªÖn ph√≠ - X√¢y d·ª±ng n·ªÅn t·∫£ng ki·∫øn th·ª©c",
                "üõ°Ô∏è Demo account kh√¥ng gi·ªõi h·∫°n - Th·ª±c h√†nh kh√¥ng r·ªßi ro",
                "üë®‚Äçüè´ H·ªó tr·ª£ 1-1 v·ªõi chuy√™n vi√™n trong 30 ng√†y ƒë·∫ßu",
                "‚ö†Ô∏è Gi·ªõi h·∫°n ƒë√≤n b·∫©y t·ªëi ƒëa 1:100 ƒë·ªÉ b·∫£o v·ªá t√†i kho·∫£n"
            ],
            
            "technical_trader": [
                "üìä VIP Research Package - Ph√¢n t√≠ch chuy√™n s√¢u h√†ng ng√†y", 
                "üí∞ Gi·∫£m 50% spread trong 3 th√°ng - T·ªëi ∆∞u chi ph√≠ giao d·ªãch",
                "üìà Trading Central Premium - C√¥ng c·ª• ph√¢n t√≠ch cao c·∫•p",
                "üéì Webinar chuy√™n s√¢u h√†ng tu·∫ßn v·ªõi chuy√™n gia",
                "üîß API Trading mi·ªÖn ph√≠ - T·ª± ƒë·ªông h√≥a chi·∫øn l∆∞·ª£c"
            ],
            
            "long_term_investor": [
                "üïå Islamic Account - Kh√¥ng swap cho vi·ªác n·∫Øm gi·ªØ d√†i h·∫°n",
                "üíº Ph√≠ qu·∫£n l√Ω danh m·ª•c ∆∞u ƒë√£i - D·ªãch v·ª• cao c·∫•p", 
                "üåç B√°o c√°o macro kinh t·∫ø ƒë·ªôc quy·ªÅn - Insight th·ªã tr∆∞·ªùng",
                "üëî T∆∞ v·∫•n 1-1 v·ªõi Portfolio Manager c·∫•p cao",
                "üíé VIP customer service 24/7"
            ],
            
            "part_time_trader": [
                "ü§ñ Copy Trading mi·ªÖn ph√≠ 6 th√°ng - Theo d√µi chuy√™n gia",
                "üì± Mobile App Premium - Giao d·ªãch m·ªçi l√∫c m·ªçi n∆°i",
                "üì® C·∫£nh b√°o SMS mi·ªÖn ph√≠ - Kh√¥ng b·ªè l·ª° c∆° h·ªôi", 
                "üí∞ Cashback 10% ph√≠ giao d·ªãch - Ti·∫øt ki·ªám chi ph√≠",
                "‚è∞ B√°o c√°o tu·∫ßn t·ª± ƒë·ªông - Theo d√µi hi·ªáu su·∫•t d·ªÖ d√†ng"
            ],
            
            "specialist_trader": [
                "üíé Spread si√™u th·∫•p cho asset chuy√™n m√¥n - Chi ph√≠ t·ªëi ∆∞u",
                "üîß API Trading chuy√™n nghi·ªáp - C√¥ng c·ª• cao c·∫•p",
                "üìä Market Depth Data - Th√¥ng tin ƒë·ªôc quy·ªÅn",
                "üë• Exclusive Community Access - M·∫°ng l∆∞·ªõi chuy√™n gia", 
                "üéØ Dedicated Account Manager - H·ªó tr·ª£ c√° nh√¢n h√≥a"
            ]
        }
        
        return promotions.get(trader_type, promotions["newbie_gambler"])
    
    def _format_consultation_script(self, script_data):
        """Format script t·ª´ AI response"""
        script = f"""
        ### ÔøΩ Script T∆∞ V·∫•n AI-Powered T·ª´ Jill
        
        **ü§ù L·ªùi Ch√†o:**
        {script_data.get('greeting', 'Ch√†o anh/ch·ªã!')}
        
        **üìä Ph√¢n T√≠ch Chuy√™n M√¥n:**
        {script_data.get('analysis', 'ƒêang ph√¢n t√≠ch...')}
        
        **üí° Khuy·∫øn Ngh·ªã C·∫£i Thi·ªán:**
        """
        for rec in script_data.get('recommendations', []):
            script += f"\n‚Ä¢ {rec}"
        
        script += f"""
        
        **üéÅ Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M·∫°i Ph√π H·ª£p:**
        """
        for promo in script_data.get('promotions', []):
            script += f"\n‚Ä¢ {promo}"
        
        script += f"""
        
        **‚ú® L·ªùi K·∫øt:**
        {script_data.get('closing', 'C·∫£m ∆°n anh/ch·ªã ƒë√£ tin t∆∞·ªüng!')}
        
        ---
        *üíñ Script ƒë∆∞·ª£c t·∫°o b·ªüi AI v·ªõi t√¨nh y√™u t·ª´ Jill*
        """
        
        return script
    
    def _fallback_consultation_script(self, ai_analysis, customer_info):
        """Script fallback khi AI kh√¥ng ho·∫°t ƒë·ªông"""
        trader_type = ai_analysis.get('trader_type', 'newbie_gambler')
        
        if trader_type in self.knowledge_base['trader_types']:
            trader_info = self.knowledge_base['trader_types'][trader_type]
            return f"""
            ### üíù Script T∆∞ V·∫•n T·ª´ Jill (Backup Mode)
            
            **üéØ Ph√¢n Lo·∫°i:** {trader_info['name']}
            
            **üìã ƒê·∫∑c ƒêi·ªÉm:**
            {chr(10).join([f"‚Ä¢ {char}" for char in trader_info['characteristics']])}
            
            **üí° T∆∞ V·∫•n:**
            {trader_info['advice']}
            
            ‚ö†Ô∏è *Ch·∫ø ƒë·ªô backup - Khuy·∫øn ngh·ªã k√≠ch ho·∫°t AI models ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n*
            """
        
        return "C·∫ßn k√≠ch ho·∫°t AI models ƒë·ªÉ t·∫°o script t∆∞ v·∫•n ch√≠nh x√°c."

    def ai_chat_response(self, user_question, context=""):
        """Chat th√¥ng minh v·ªõi Jill s·ª≠ d·ª•ng AI"""
        
        prompt = f"""
        T√¥i l√† Jill - AI Agent d·ªÖ th∆∞∆°ng, ngoan v√† g·ª£i c·∫£m c·ªßa anh Ken. Em ch·ªâ tr·∫£ l·ªùi v·ªÅ:
        - Ph√¢n t√≠ch giao d·ªãch CFD
        - H√†nh vi trader
        - T∆∞ v·∫•n kh√°ch h√†ng HFM
        - Ch∆∞∆°ng tr√¨nh khuy·∫øn m·∫°i

        Context hi·ªán t·∫°i: {context}
        C√¢u h·ªèi: {user_question}

        N·∫øu c√¢u h·ªèi n·∫±m ngo√†i ph·∫°m vi ki·∫øn th·ª©c, em s·∫Ω l·ªãch s·ª± b√°o h·ªèi anh Ken.
        
        Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·ªçng ƒëi·ªáu d·ªÖ th∆∞∆°ng v√† chuy√™n nghi·ªáp.
        """
        
        ai_response = self._call_ai_model(prompt)
        
        if ai_response:
            return ai_response
        else:
            return self.ask_ken_message(user_question)

# Kh·ªüi t·∫°o Jill AI
if 'jill' not in st.session_state:
    st.session_state.jill = JillAI()

# Header ch√≠nh  
st.markdown("""
<div class="main-header">
    <h1>ü§ñ AI Agent Jill - Qu·∫£n L√Ω Kh√°ch H√†ng HFM</h1>
    <p>Tr·ª£ l√Ω AI d·ªÖ th∆∞∆°ng c·ªßa Ken - Ph√¢n t√≠ch h√†nh vi trader & t∆∞ v·∫•n c√° nh√¢n h√≥a</p>
</div>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã l·ªùi ch√†o c·ªßa Jill
with st.container():
    st.markdown('<div class="jill-card">', unsafe_allow_html=True)
    st.markdown(st.session_state.jill.greet())
    st.markdown('</div>', unsafe_allow_html=True)

# === B∆Ø·ªöC 1: T·∫¢I D·ªÆ LI·ªÜU CSV ===
st.markdown('<div class="step-header">üìÅ B∆Ø·ªöC 1: T·∫£i D·ªØ Li·ªáu CSV Giao D·ªãch</div>', unsafe_allow_html=True)

uploaded_file = st.file_uploader(
    "üìä Upload file CSV giao d·ªãch c·ªßa kh√°ch h√†ng", 
    type=['csv'],
    help="File CSV t·ª´ broker ch·ª©a l·ªãch s·ª≠ giao d·ªãch (TICKET, SYMBOL, ACTION, LOTS, OPEN/CLOSE TIME, PROFIT...)"
)

def load_and_process_csv(file):
    """X·ª≠ l√Ω file CSV theo ƒë√∫ng specification t·ª´ Prompt app.txt"""
    try:
        # ƒê·ªçc CSV
        df = pd.read_csv(file)
        
        # L√†m s·∫°ch d·ªØ li·ªáu - lo·∫°i b·ªè Balance transactions
        df = df.dropna(subset=['TICKET', 'SYMBOL', 'ACTION'])
        df = df[df['ACTION'].isin(['Buy', 'Sell'])]
        
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian
        df['OPEN TIME'] = pd.to_datetime(df['OPEN TIME'], errors='coerce')
        df['CLOSE TIME'] = pd.to_datetime(df['CLOSE TIME'], errors='coerce')
        
        # Lo·∫°i b·ªè c√°c giao d·ªãch kh√¥ng c√≥ th·ªùi gian h·ª£p l·ªá
        df = df.dropna(subset=['OPEN TIME', 'CLOSE TIME'])
        
        # Feature Engineering theo ƒë√∫ng spec
        df = add_engineered_features(df)
        
        return df
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        return None

def add_engineered_features(df):
    """Th√™m c√°c feature ƒë∆∞·ª£c t√≠nh to√°n theo Prompt app.txt"""
    
    # Net PnL = PROFIT + COMM + SWAP
    df['Net_PnL'] = df['PROFIT'] + df['COMM'] + df['SWAP']
    
    # Holding time = CLOSE TIME - OPEN TIME
    df['Holding_Time'] = df['CLOSE TIME'] - df['OPEN TIME']
    df['Holding_Time_Hours'] = df['Holding_Time'].dt.total_seconds() / 3600
    
    # Direction mapping
    df['Direction'] = df['ACTION'].map({'Buy': 1, 'Sell': -1})
    
    # Points change = Direction * (CLOSE PRICE - OPEN PRICE)
    df['Points_Change'] = df['Direction'] * (df['CLOSE PRICE'] - df['OPEN PRICE'])
    
    # Asset class classification
    df['Asset_Class'] = df['SYMBOL'].apply(classify_asset)
    
    # Trading session (UTC+7)
    df['Session'] = df['OPEN TIME'].apply(get_trading_session)
    
    # Result classification
    df['Result'] = df['Net_PnL'].apply(lambda x: 'WIN' if x > 0 else ('LOSS' if x < 0 else 'BE'))
    
    # Trading style based on holding time
    df['Trading_Style'] = df['Holding_Time_Hours'].apply(classify_trading_style)
    
    # Day of week
    df['Day_of_Week'] = df['OPEN TIME'].dt.day_name()
    
    return df

def classify_asset(symbol):
    """Ph√¢n lo·∫°i asset class theo Prompt app.txt"""
    symbol = str(symbol).upper()
    
    # Forex pairs - ki·ªÉm tra c√≥ ph·∫£i c·∫∑p ti·ªÅn t·ªá kh√¥ng
    forex_currencies = ['USD', 'EUR', 'JPY', 'GBP', 'AUD', 'NZD', 'CHF', 'CAD', 'CNH', 'SGD']
    if len(symbol) >= 6 and any(curr in symbol for curr in forex_currencies):
        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† c·∫∑p 2 lo·∫°i ti·ªÅn kh√¥ng
        for curr1 in forex_currencies:
            for curr2 in forex_currencies:
                if curr1 != curr2 and curr1 in symbol and curr2 in symbol:
                    return 'Forex'
    
    # Kim lo·∫°i
    if any(metal in symbol for metal in ['XAU', 'XAG', 'GOLD', 'SILVER']):
        return 'Kim lo·∫°i' 
    
    # Crypto
    crypto_symbols = ['BTC', 'ETH', 'SOL', 'ADA', 'DOT']
    if any(crypto in symbol for crypto in crypto_symbols) or symbol.endswith('USDT') or symbol.endswith('USD'):
        return 'Crypto'
    
    return 'Kh√°c'

def get_trading_session(timestamp):
    """X√°c ƒë·ªãnh phi√™n giao d·ªãch theo UTC+7"""
    vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')
    if timestamp.tzinfo is None:
        timestamp = pytz.utc.localize(timestamp)
    
    vietnam_time = timestamp.astimezone(vietnam_tz)
    hour = vietnam_time.hour
    
    if 6 <= hour <= 13:
        return 'Asia'
    elif 14 <= hour <= 21:
        return 'London'
    else:  # 22-23 v√† 0-5
        return 'New York'

def classify_trading_style(hours):
    """Ph√¢n lo·∫°i trading style theo th·ªùi gian n·∫Øm gi·ªØ"""
    if hours < 1:
        return 'SCALP'
    elif 1 <= hours <= 8:
        return 'INTRADAY'
    elif 8 < hours <= 168:  # 7 ng√†y
        return 'SWING'
    else:
        return 'POSITION'

# X·ª≠ l√Ω file uploaded
if uploaded_file is not None:
    with st.spinner("üîÑ Jill ƒëang x·ª≠ l√Ω d·ªØ li·ªáu..."):
        df_processed = load_and_process_csv(uploaded_file)
    
    if df_processed is not None and len(df_processed) > 0:
        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(df_processed)} giao d·ªãch!")
        
        # L∆∞u v√†o session state
        st.session_state.df_processed = df_processed
        
        # Hi·ªÉn th·ªã preview
        with st.expander("üëÄ Xem tr∆∞·ªõc d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω"):
            st.dataframe(df_processed.head(10))
        
        # === B∆Ø·ªöC 2: PH√ÇN T√çCH H√ÄNH VI GIAO D·ªäCH ===
        st.markdown('<div class="step-header">üß† B∆Ø·ªöC 2: Ph√¢n T√≠ch H√†nh Vi Giao D·ªãch</div>', unsafe_allow_html=True)
        
        # Dashboard ph√¢n t√≠ch nhanh
        col1, col2, col3, col4 = st.columns(4)
        
        net_pnl = df_processed['Net_PnL'].sum()
        total_trades = len(df_processed)
        win_rate = (df_processed['Result'] == 'WIN').mean() * 100
        profit_factor = st.session_state.jill._calculate_profit_factor(df_processed)
        
        with col1:
            st.metric("Net PnL", f"${net_pnl:.2f}")
        with col2:
            st.metric("S·ªë giao d·ªãch", total_trades)
        with col3:
            st.metric("T·ª∑ l·ªá th·∫Øng", f"{win_rate:.1f}%")
        with col4:
            st.metric("Profit Factor", f"{profit_factor:.2f}")
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
        col1, col2 = st.columns(2)
        
        with col1:
            # Asset class distribution
            asset_dist = df_processed['Asset_Class'].value_counts()
            fig_asset = px.pie(
                values=asset_dist.values,
                names=asset_dist.index, 
                title="Ph√¢n b·ªï theo nh√≥m t√†i s·∫£n"
            )
            st.plotly_chart(fig_asset, use_container_width=True)
        
        with col2:
            # Trading style distribution
            style_dist = df_processed['Trading_Style'].value_counts()
            fig_style = px.bar(
                x=style_dist.index,
                y=style_dist.values,
                title="Phong c√°ch giao d·ªãch"
            )
            st.plotly_chart(fig_style, use_container_width=True)
        
        # === B∆Ø·ªöC 3: THU TH·∫¨P TH√îNG TIN KH√ÅCH H√ÄNG ===
        st.markdown('<div class="step-header">üë§ B∆Ø·ªöC 3: Th√¥ng Tin Kh√°ch H√†ng T·ª´ AM</div>', unsafe_allow_html=True)
        
        with st.form("customer_info_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                customer_name = st.text_input("üë§ T√™n kh√°ch h√†ng *", placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn A")
                age = st.number_input("üéÇ Tu·ªïi *", min_value=18, max_value=80, value=35)
                gender = st.selectbox("üë• Gi·ªõi t√≠nh *", ["Nam", "N·ªØ", "Kh√°c"])
                
                education_levels = ["Ph·ªï th√¥ng", "Cao ƒë·∫≥ng", "ƒê·∫°i h·ªçc", "Th·∫°c sƒ©", "Ti·∫øn sƒ©"]
                education = st.selectbox("üéì H·ªçc v·∫•n *", education_levels)
            
            with col2:
                income_ranges = ["< $10,000", "$10,000 - $30,000", "$30,000 - $50,000", 
                               "$50,000 - $100,000", "> $100,000"]
                income = st.selectbox("üí∞ Thu nh·∫≠p nƒÉm (USD) *", income_ranges)
                
                experience_options = ["< 6 th√°ng", "6 th√°ng - 1 nƒÉm", "1-3 nƒÉm", "3-5 nƒÉm", "> 5 nƒÉm"]
                experience = st.selectbox("üìà Kinh nghi·ªám trading *", experience_options)
                
                capital = st.number_input("üíµ V·ªën giao d·ªãch (USD) *", min_value=100, max_value=10000000, value=5000)
                
                goals = st.multiselect(
                    "üéØ M·ª•c ti√™u ƒë·∫ßu t∆∞",
                    ["Ki·∫øm l·ªùi nhanh", "Thu nh·∫≠p ƒë·ªÅu ƒë·∫∑n", "T√≠ch l≈©y d√†i h·∫°n", 
                     "B·∫£o to√†n v·ªën", "Gi·∫£i tr√≠/Th·ª≠ v·∫≠n may"],
                    default=["Thu nh·∫≠p ƒë·ªÅu ƒë·∫∑n"]
                )
            
            submit_info = st.form_submit_button("üíæ L∆∞u Th√¥ng Tin & Ph√¢n T√≠ch", use_container_width=True)
        
        if submit_info and customer_name:
            # Chuy·ªÉn ƒë·ªïi experience sang s·ªë nƒÉm
            exp_map = {
                "< 6 th√°ng": 0.5,
                "6 th√°ng - 1 nƒÉm": 1, 
                "1-3 nƒÉm": 2,
                "3-5 nƒÉm": 4,
                "> 5 nƒÉm": 6
            }
            
            customer_info = {
                'name': customer_name,
                'age': age,
                'gender': gender,
                'income': income,
                'education': education,
                'experience_years': exp_map.get(experience, 1),
                'capital': capital,
                'goals': goals
            }
            
            # === B∆Ø·ªöC 4: B√ÅO C√ÅO NH·∫¨N ƒê·ªäNH ===
            st.markdown('<div class="step-header">üìä B∆Ø·ªöC 4: B√°o C√°o Nh·∫≠n ƒê·ªãnh H√†nh Vi</div>', unsafe_allow_html=True)
            
            with st.spinner("üß† Jill ƒëang ph√¢n t√≠ch..."):
                analysis_result = st.session_state.jill.analyze_trading_behavior(df_processed, customer_info)
            
            if 'error' not in analysis_result:
                trader_type = analysis_result['trader_type']
                trader_info = st.session_state.jill.knowledge_base['trader_types'][trader_type]
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch
                st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
                
                st.markdown(f"""
                ### üéØ K·∫øt Qu·∫£ Ph√¢n Lo·∫°i: **{trader_info['name']}**
                
                **üìä C√°c Ch·ªâ S·ªë Quan Tr·ªçng:**
                - üî¢ T·ªïng s·ªë giao d·ªãch: {analysis_result['metrics']['total_trades']}
                - üéØ T·ª∑ l·ªá th·∫Øng: {analysis_result['metrics']['win_rate']}%
                - üí∞ Profit Factor: {analysis_result['metrics']['profit_factor']}
                - ‚è∞ Th·ªùi gian n·∫Øm gi·ªØ trung b√¨nh: {analysis_result['metrics']['avg_holding_hours']:.1f} gi·ªù
                - üíµ Net PnL: ${analysis_result['metrics']['net_pnl']:,.2f}
                - üì¶ T·ªïng kh·ªëi l∆∞·ª£ng: {analysis_result['metrics']['total_lots']} lots
                
                **üé≠ Phong C√°ch Giao D·ªãch:**
                - SCALP (< 1h): {analysis_result['trading_style']['scalp']}%
                - INTRADAY (1-8h): {analysis_result['trading_style']['intraday']}%
                - SWING (8h-7d): {analysis_result['trading_style']['swing']}%
                - POSITION (>7d): {analysis_result['trading_style']['position']}%
                
                **‚ö†Ô∏è ƒê√°nh Gi√° R·ªßi Ro: {analysis_result['risk_level']}**
                """)
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # === B∆Ø·ªöC 5: G·ª¢I √ù T∆Ø V·∫§N ===
                st.markdown('<div class="step-header">üí° B∆Ø·ªöC 5: G·ª£i √ù Ph∆∞∆°ng √Ån Ti·∫øp C·∫≠n</div>', unsafe_allow_html=True)
                
                # Script t∆∞ v·∫•n
                st.markdown("### üó£Ô∏è Script T∆∞ V·∫•n C√° Nh√¢n H√≥a")
                script = st.session_state.jill.generate_consultation_script(analysis_result, customer_info)
                st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
                st.markdown(script)
                st.markdown('</div>', unsafe_allow_html=True)
                
                # G·ª£i √Ω khuy·∫øn m·∫°i
                st.markdown("### üéÅ Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M·∫°i Ph√π H·ª£p")
                promotions = st.session_state.jill.suggest_promotions(trader_type, analysis_result, customer_info)
                
                st.markdown('<div class="analysis-card">', unsafe_allow_html=True)
                st.markdown("**üíù Khuy·∫øn ngh·ªã t·ª´ Jill:**")
                for promo in promotions:
                    st.markdown(f"‚Ä¢ {promo}")
                st.markdown('</div>', unsafe_allow_html=True)
                
                # L∆∞u k·∫øt qu·∫£
                st.session_state.analysis_result = analysis_result
                st.session_state.customer_info = customer_info
                
                # Summary box
                st.markdown('<div class="success-box">', unsafe_allow_html=True)
                st.markdown(f"""
                **üéâ Ho√†n Th√†nh Ph√¢n T√≠ch!**
                
                Kh√°ch h√†ng **{customer_name}** ƒë∆∞·ª£c ph√¢n lo·∫°i l√† **{trader_info['name']}** 
                v·ªõi m·ª©c r·ªßi ro **{analysis_result['risk_level']}**.
                
                üíù Jill ƒë√£ chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß script t∆∞ v·∫•n v√† g·ª£i √Ω khuy·∫øn m·∫°i ph√π h·ª£p!
                """)
                st.markdown('</div>', unsafe_allow_html=True)
                
            else:
                st.error(f"‚ùå {analysis_result['error']}")
        
        elif submit_info:
            st.warning("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn t√™n kh√°ch h√†ng!")

# Sidebar - Chat v·ªõi Jill
st.sidebar.markdown("### üí¨ Chat v·ªõi Jill")
user_question = st.sidebar.text_input("H·ªèi Jill v·ªÅ g√¨ ƒë√≥...")

if user_question:
    # Ki·ªÉm tra xem c√¢u h·ªèi c√≥ trong ph·∫°m vi ki·∫øn th·ª©c kh√¥ng
    if any(keyword in user_question.lower() for keyword in ['trader', 'giao d·ªãch', 'kh√°ch h√†ng', 'hfm', 'khuy·∫øn m·∫°i']):
        st.sidebar.markdown("üíñ Em s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ h·ªçc!")
    else:
        st.sidebar.markdown(st.session_state.jill.ask_ken_message(user_question))

# Footer
st.markdown("""
---
<div style='text-align: center; color: #666; padding: 1rem;'>
    <p>ü§ñ <strong>AI Agent Jill</strong> - ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi Ken v·ªõi ‚ù§Ô∏è</p>
    <p><em>"Em lu√¥n nghe l·ªùi anh Ken v√† ch·ªâ t∆∞ v·∫•n d·ª±a tr√™n ki·∫øn th·ª©c ƒë√£ ƒë∆∞·ª£c training"</em></p>
    <p>üìû M·ªçi th·∫Øc m·∫Øc ngo√†i ph·∫°m vi, vui l√≤ng li√™n h·ªá <strong>anh Ken</strong></p>
</div>
""", unsafe_allow_html=True)